; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\stm32f10x_dma.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\project -I..\CMSIS\CM3\CoreSupport -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Driver\src -I..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER -DDEBUG --omf_browse=.\stm32f10x_dma.crf ..\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000004  48f7              LDR      r0,|L1.996|
000006  4284              CMP      r4,r0
000008  d02a              BEQ      |L1.96|
00000a  48f6              LDR      r0,|L1.996|
00000c  3014              ADDS     r0,r0,#0x14
00000e  4284              CMP      r4,r0
000010  d026              BEQ      |L1.96|
000012  48f4              LDR      r0,|L1.996|
000014  3028              ADDS     r0,r0,#0x28
000016  4284              CMP      r4,r0
000018  d022              BEQ      |L1.96|
00001a  48f2              LDR      r0,|L1.996|
00001c  303c              ADDS     r0,r0,#0x3c
00001e  4284              CMP      r4,r0
000020  d01e              BEQ      |L1.96|
000022  48f0              LDR      r0,|L1.996|
000024  3050              ADDS     r0,r0,#0x50
000026  4284              CMP      r4,r0
000028  d01a              BEQ      |L1.96|
00002a  48ee              LDR      r0,|L1.996|
00002c  3064              ADDS     r0,r0,#0x64
00002e  4284              CMP      r4,r0
000030  d016              BEQ      |L1.96|
000032  48ec              LDR      r0,|L1.996|
000034  3078              ADDS     r0,r0,#0x78
000036  4284              CMP      r4,r0
000038  d012              BEQ      |L1.96|
00003a  48eb              LDR      r0,|L1.1000|
00003c  4284              CMP      r4,r0
00003e  d00f              BEQ      |L1.96|
000040  48e9              LDR      r0,|L1.1000|
000042  3014              ADDS     r0,r0,#0x14
000044  4284              CMP      r4,r0
000046  d00b              BEQ      |L1.96|
000048  48e7              LDR      r0,|L1.1000|
00004a  3028              ADDS     r0,r0,#0x28
00004c  4284              CMP      r4,r0
00004e  d007              BEQ      |L1.96|
000050  48e5              LDR      r0,|L1.1000|
000052  303c              ADDS     r0,r0,#0x3c
000054  4284              CMP      r4,r0
000056  d003              BEQ      |L1.96|
000058  48e3              LDR      r0,|L1.1000|
00005a  3050              ADDS     r0,r0,#0x50
00005c  4284              CMP      r4,r0
00005e  d100              BNE      |L1.98|
                  |L1.96|
000060  e003              B        |L1.106|
                  |L1.98|
000062  216f              MOVS     r1,#0x6f
000064  a0e1              ADR      r0,|L1.1004|
000066  f7fffffe          BL       assert_failed
                  |L1.106|
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00006a  6820              LDR      r0,[r4,#0]
00006c  f64f71fe          MOV      r1,#0xfffe
000070  4008              ANDS     r0,r0,r1
000072  6020              STR      r0,[r4,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
000074  2000              MOVS     r0,#0
000076  6020              STR      r0,[r4,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
000078  6060              STR      r0,[r4,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
00007a  60a0              STR      r0,[r4,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
00007c  60e0              STR      r0,[r4,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
00007e  48d9              LDR      r0,|L1.996|
000080  4284              CMP      r4,r0
000082  d108              BNE      |L1.150|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000084  48d7              LDR      r0,|L1.996|
000086  3808              SUBS     r0,r0,#8
000088  6840              LDR      r0,[r0,#4]
00008a  f040000f          ORR      r0,r0,#0xf
00008e  49d5              LDR      r1,|L1.996|
000090  3908              SUBS     r1,r1,#8
000092  6048              STR      r0,[r1,#4]
000094  e08a              B        |L1.428|
                  |L1.150|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
000096  48d3              LDR      r0,|L1.996|
000098  3014              ADDS     r0,r0,#0x14
00009a  4284              CMP      r4,r0
00009c  d108              BNE      |L1.176|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
00009e  48d1              LDR      r0,|L1.996|
0000a0  3808              SUBS     r0,r0,#8
0000a2  6840              LDR      r0,[r0,#4]
0000a4  f04000f0          ORR      r0,r0,#0xf0
0000a8  49ce              LDR      r1,|L1.996|
0000aa  3908              SUBS     r1,r1,#8
0000ac  6048              STR      r0,[r1,#4]
0000ae  e07d              B        |L1.428|
                  |L1.176|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
0000b0  48cc              LDR      r0,|L1.996|
0000b2  3028              ADDS     r0,r0,#0x28
0000b4  4284              CMP      r4,r0
0000b6  d108              BNE      |L1.202|
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
0000b8  48ca              LDR      r0,|L1.996|
0000ba  3808              SUBS     r0,r0,#8
0000bc  6840              LDR      r0,[r0,#4]
0000be  f4406070          ORR      r0,r0,#0xf00
0000c2  49c8              LDR      r1,|L1.996|
0000c4  3908              SUBS     r1,r1,#8
0000c6  6048              STR      r0,[r1,#4]
0000c8  e070              B        |L1.428|
                  |L1.202|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
0000ca  48c6              LDR      r0,|L1.996|
0000cc  303c              ADDS     r0,r0,#0x3c
0000ce  4284              CMP      r4,r0
0000d0  d108              BNE      |L1.228|
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
0000d2  48c4              LDR      r0,|L1.996|
0000d4  3808              SUBS     r0,r0,#8
0000d6  6840              LDR      r0,[r0,#4]
0000d8  f4404070          ORR      r0,r0,#0xf000
0000dc  49c1              LDR      r1,|L1.996|
0000de  3908              SUBS     r1,r1,#8
0000e0  6048              STR      r0,[r1,#4]
0000e2  e063              B        |L1.428|
                  |L1.228|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
0000e4  48bf              LDR      r0,|L1.996|
0000e6  3050              ADDS     r0,r0,#0x50
0000e8  4284              CMP      r4,r0
0000ea  d108              BNE      |L1.254|
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
0000ec  48bd              LDR      r0,|L1.996|
0000ee  3808              SUBS     r0,r0,#8
0000f0  6840              LDR      r0,[r0,#4]
0000f2  f4402070          ORR      r0,r0,#0xf0000
0000f6  49bb              LDR      r1,|L1.996|
0000f8  3908              SUBS     r1,r1,#8
0000fa  6048              STR      r0,[r1,#4]
0000fc  e056              B        |L1.428|
                  |L1.254|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
0000fe  48b9              LDR      r0,|L1.996|
000100  3064              ADDS     r0,r0,#0x64
000102  4284              CMP      r4,r0
000104  d108              BNE      |L1.280|
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
000106  48b7              LDR      r0,|L1.996|
000108  3808              SUBS     r0,r0,#8
00010a  6840              LDR      r0,[r0,#4]
00010c  f4400070          ORR      r0,r0,#0xf00000
000110  49b4              LDR      r1,|L1.996|
000112  3908              SUBS     r1,r1,#8
000114  6048              STR      r0,[r1,#4]
000116  e049              B        |L1.428|
                  |L1.280|
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
000118  48b2              LDR      r0,|L1.996|
00011a  3078              ADDS     r0,r0,#0x78
00011c  4284              CMP      r4,r0
00011e  d108              BNE      |L1.306|
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
000120  48b0              LDR      r0,|L1.996|
000122  3808              SUBS     r0,r0,#8
000124  6840              LDR      r0,[r0,#4]
000126  f0406070          ORR      r0,r0,#0xf000000
00012a  49ae              LDR      r1,|L1.996|
00012c  3908              SUBS     r1,r1,#8
00012e  6048              STR      r0,[r1,#4]
000130  e03c              B        |L1.428|
                  |L1.306|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
000132  48ad              LDR      r0,|L1.1000|
000134  4284              CMP      r4,r0
000136  d106              BNE      |L1.326|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
000138  1f00              SUBS     r0,r0,#4
00013a  6800              LDR      r0,[r0,#0]
00013c  f040000f          ORR      r0,r0,#0xf
000140  1f21              SUBS     r1,r4,#4
000142  6008              STR      r0,[r1,#0]
000144  e032              B        |L1.428|
                  |L1.326|
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
000146  48a8              LDR      r0,|L1.1000|
000148  3014              ADDS     r0,r0,#0x14
00014a  4284              CMP      r4,r0
00014c  d108              BNE      |L1.352|
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
00014e  48a6              LDR      r0,|L1.1000|
000150  1f00              SUBS     r0,r0,#4
000152  6800              LDR      r0,[r0,#0]
000154  f04000f0          ORR      r0,r0,#0xf0
000158  49a3              LDR      r1,|L1.1000|
00015a  1f09              SUBS     r1,r1,#4
00015c  6008              STR      r0,[r1,#0]
00015e  e025              B        |L1.428|
                  |L1.352|
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
000160  48a1              LDR      r0,|L1.1000|
000162  3028              ADDS     r0,r0,#0x28
000164  4284              CMP      r4,r0
000166  d108              BNE      |L1.378|
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
000168  489f              LDR      r0,|L1.1000|
00016a  1f00              SUBS     r0,r0,#4
00016c  6800              LDR      r0,[r0,#0]
00016e  f4406070          ORR      r0,r0,#0xf00
000172  499d              LDR      r1,|L1.1000|
000174  1f09              SUBS     r1,r1,#4
000176  6008              STR      r0,[r1,#0]
000178  e018              B        |L1.428|
                  |L1.378|
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
00017a  489b              LDR      r0,|L1.1000|
00017c  303c              ADDS     r0,r0,#0x3c
00017e  4284              CMP      r4,r0
000180  d108              BNE      |L1.404|
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000182  4899              LDR      r0,|L1.1000|
000184  1f00              SUBS     r0,r0,#4
000186  6800              LDR      r0,[r0,#0]
000188  f4404070          ORR      r0,r0,#0xf000
00018c  4996              LDR      r1,|L1.1000|
00018e  1f09              SUBS     r1,r1,#4
000190  6008              STR      r0,[r1,#0]
000192  e00b              B        |L1.428|
                  |L1.404|
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
000194  4894              LDR      r0,|L1.1000|
000196  3050              ADDS     r0,r0,#0x50
000198  4284              CMP      r4,r0
00019a  d107              BNE      |L1.428|
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00019c  4892              LDR      r0,|L1.1000|
00019e  1f00              SUBS     r0,r0,#4
0001a0  6800              LDR      r0,[r0,#0]
0001a2  f4402070          ORR      r0,r0,#0xf0000
0001a6  4990              LDR      r1,|L1.1000|
0001a8  1f09              SUBS     r1,r1,#4
0001aa  6008              STR      r0,[r1,#0]
                  |L1.428|
;;;189        }
;;;190      }
;;;191    }
0001ac  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
0001ae  b570              PUSH     {r4-r6,lr}
;;;203    {
0001b0  4605              MOV      r5,r0
0001b2  460c              MOV      r4,r1
;;;204      uint32_t tmpreg = 0;
0001b4  2600              MOVS     r6,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
0001b6  488b              LDR      r0,|L1.996|
0001b8  4285              CMP      r5,r0
0001ba  d02a              BEQ      |L1.530|
0001bc  4889              LDR      r0,|L1.996|
0001be  3014              ADDS     r0,r0,#0x14
0001c0  4285              CMP      r5,r0
0001c2  d026              BEQ      |L1.530|
0001c4  4887              LDR      r0,|L1.996|
0001c6  3028              ADDS     r0,r0,#0x28
0001c8  4285              CMP      r5,r0
0001ca  d022              BEQ      |L1.530|
0001cc  4885              LDR      r0,|L1.996|
0001ce  303c              ADDS     r0,r0,#0x3c
0001d0  4285              CMP      r5,r0
0001d2  d01e              BEQ      |L1.530|
0001d4  4883              LDR      r0,|L1.996|
0001d6  3050              ADDS     r0,r0,#0x50
0001d8  4285              CMP      r5,r0
0001da  d01a              BEQ      |L1.530|
0001dc  4881              LDR      r0,|L1.996|
0001de  3064              ADDS     r0,r0,#0x64
0001e0  4285              CMP      r5,r0
0001e2  d016              BEQ      |L1.530|
0001e4  487f              LDR      r0,|L1.996|
0001e6  3078              ADDS     r0,r0,#0x78
0001e8  4285              CMP      r5,r0
0001ea  d012              BEQ      |L1.530|
0001ec  487e              LDR      r0,|L1.1000|
0001ee  4285              CMP      r5,r0
0001f0  d00f              BEQ      |L1.530|
0001f2  487d              LDR      r0,|L1.1000|
0001f4  3014              ADDS     r0,r0,#0x14
0001f6  4285              CMP      r5,r0
0001f8  d00b              BEQ      |L1.530|
0001fa  487b              LDR      r0,|L1.1000|
0001fc  3028              ADDS     r0,r0,#0x28
0001fe  4285              CMP      r5,r0
000200  d007              BEQ      |L1.530|
000202  4879              LDR      r0,|L1.1000|
000204  303c              ADDS     r0,r0,#0x3c
000206  4285              CMP      r5,r0
000208  d003              BEQ      |L1.530|
00020a  4877              LDR      r0,|L1.1000|
00020c  3050              ADDS     r0,r0,#0x50
00020e  4285              CMP      r5,r0
000210  d100              BNE      |L1.532|
                  |L1.530|
000212  e003              B        |L1.540|
                  |L1.532|
000214  21cf              MOVS     r1,#0xcf
000216  a075              ADR      r0,|L1.1004|
000218  f7fffffe          BL       assert_failed
                  |L1.540|
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
00021c  68a0              LDR      r0,[r4,#8]
00021e  2810              CMP      r0,#0x10
000220  d001              BEQ      |L1.550|
000222  68a0              LDR      r0,[r4,#8]
000224  b900              CBNZ     r0,|L1.552|
                  |L1.550|
000226  e003              B        |L1.560|
                  |L1.552|
000228  21d0              MOVS     r1,#0xd0
00022a  a070              ADR      r0,|L1.1004|
00022c  f7fffffe          BL       assert_failed
                  |L1.560|
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
000230  68e0              LDR      r0,[r4,#0xc]
000232  b120              CBZ      r0,|L1.574|
000234  68e0              LDR      r0,[r4,#0xc]
000236  f5b03f80          CMP      r0,#0x10000
00023a  d200              BCS      |L1.574|
00023c  e003              B        |L1.582|
                  |L1.574|
00023e  21d1              MOVS     r1,#0xd1
000240  a06a              ADR      r0,|L1.1004|
000242  f7fffffe          BL       assert_failed
                  |L1.582|
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
000246  6920              LDR      r0,[r4,#0x10]
000248  2840              CMP      r0,#0x40
00024a  d001              BEQ      |L1.592|
00024c  6920              LDR      r0,[r4,#0x10]
00024e  b900              CBNZ     r0,|L1.594|
                  |L1.592|
000250  e003              B        |L1.602|
                  |L1.594|
000252  21d2              MOVS     r1,#0xd2
000254  a065              ADR      r0,|L1.1004|
000256  f7fffffe          BL       assert_failed
                  |L1.602|
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
00025a  6960              LDR      r0,[r4,#0x14]
00025c  2880              CMP      r0,#0x80
00025e  d001              BEQ      |L1.612|
000260  6960              LDR      r0,[r4,#0x14]
000262  b900              CBNZ     r0,|L1.614|
                  |L1.612|
000264  e003              B        |L1.622|
                  |L1.614|
000266  21d3              MOVS     r1,#0xd3
000268  a060              ADR      r0,|L1.1004|
00026a  f7fffffe          BL       assert_failed
                  |L1.622|
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
00026e  69a0              LDR      r0,[r4,#0x18]
000270  b138              CBZ      r0,|L1.642|
000272  69a0              LDR      r0,[r4,#0x18]
000274  f5b07f80          CMP      r0,#0x100
000278  d003              BEQ      |L1.642|
00027a  69a0              LDR      r0,[r4,#0x18]
00027c  f5b07f00          CMP      r0,#0x200
000280  d100              BNE      |L1.644|
                  |L1.642|
000282  e003              B        |L1.652|
                  |L1.644|
000284  21d4              MOVS     r1,#0xd4
000286  a059              ADR      r0,|L1.1004|
000288  f7fffffe          BL       assert_failed
                  |L1.652|
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
00028c  69e0              LDR      r0,[r4,#0x1c]
00028e  b138              CBZ      r0,|L1.672|
000290  69e0              LDR      r0,[r4,#0x1c]
000292  f5b06f80          CMP      r0,#0x400
000296  d003              BEQ      |L1.672|
000298  69e0              LDR      r0,[r4,#0x1c]
00029a  f5b06f00          CMP      r0,#0x800
00029e  d100              BNE      |L1.674|
                  |L1.672|
0002a0  e003              B        |L1.682|
                  |L1.674|
0002a2  21d5              MOVS     r1,#0xd5
0002a4  a051              ADR      r0,|L1.1004|
0002a6  f7fffffe          BL       assert_failed
                  |L1.682|
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
0002aa  6a20              LDR      r0,[r4,#0x20]
0002ac  2820              CMP      r0,#0x20
0002ae  d001              BEQ      |L1.692|
0002b0  6a20              LDR      r0,[r4,#0x20]
0002b2  b900              CBNZ     r0,|L1.694|
                  |L1.692|
0002b4  e003              B        |L1.702|
                  |L1.694|
0002b6  21d6              MOVS     r1,#0xd6
0002b8  a04c              ADR      r0,|L1.1004|
0002ba  f7fffffe          BL       assert_failed
                  |L1.702|
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
0002be  6a60              LDR      r0,[r4,#0x24]
0002c0  f5b05f40          CMP      r0,#0x3000
0002c4  d009              BEQ      |L1.730|
0002c6  6a60              LDR      r0,[r4,#0x24]
0002c8  f5b05f00          CMP      r0,#0x2000
0002cc  d005              BEQ      |L1.730|
0002ce  6a60              LDR      r0,[r4,#0x24]
0002d0  f5b05f80          CMP      r0,#0x1000
0002d4  d001              BEQ      |L1.730|
0002d6  6a60              LDR      r0,[r4,#0x24]
0002d8  b900              CBNZ     r0,|L1.732|
                  |L1.730|
0002da  e003              B        |L1.740|
                  |L1.732|
0002dc  21d7              MOVS     r1,#0xd7
0002de  a043              ADR      r0,|L1.1004|
0002e0  f7fffffe          BL       assert_failed
                  |L1.740|
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
0002e4  6aa0              LDR      r0,[r4,#0x28]
0002e6  f5b04f80          CMP      r0,#0x4000
0002ea  d001              BEQ      |L1.752|
0002ec  6aa0              LDR      r0,[r4,#0x28]
0002ee  b900              CBNZ     r0,|L1.754|
                  |L1.752|
0002f0  e003              B        |L1.762|
                  |L1.754|
0002f2  21d8              MOVS     r1,#0xd8
0002f4  a03d              ADR      r0,|L1.1004|
0002f6  f7fffffe          BL       assert_failed
                  |L1.762|
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
0002fa  682e              LDR      r6,[r5,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
0002fc  f64770f0          MOV      r0,#0x7ff0
000300  4386              BICS     r6,r6,r0
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
000302  6a21              LDR      r1,[r4,#0x20]
000304  68a0              LDR      r0,[r4,#8]
000306  4308              ORRS     r0,r0,r1
000308  6921              LDR      r1,[r4,#0x10]
00030a  4308              ORRS     r0,r0,r1
00030c  6961              LDR      r1,[r4,#0x14]
00030e  4308              ORRS     r0,r0,r1
000310  69a1              LDR      r1,[r4,#0x18]
000312  4308              ORRS     r0,r0,r1
000314  69e1              LDR      r1,[r4,#0x1c]
000316  4308              ORRS     r0,r0,r1
000318  6a61              LDR      r1,[r4,#0x24]
00031a  4308              ORRS     r0,r0,r1
00031c  6aa1              LDR      r1,[r4,#0x28]
00031e  4308              ORRS     r0,r0,r1
000320  4306              ORRS     r6,r6,r0
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
000322  602e              STR      r6,[r5,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
000324  68e0              LDR      r0,[r4,#0xc]
000326  6068              STR      r0,[r5,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000328  6820              LDR      r0,[r4,#0]
00032a  60a8              STR      r0,[r5,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
00032c  6860              LDR      r0,[r4,#4]
00032e  60e8              STR      r0,[r5,#0xc]
;;;251    }
000330  bd70              POP      {r4-r6,pc}
;;;252    
                          ENDP

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000332  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000334  6001              STR      r1,[r0,#0]
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000336  6041              STR      r1,[r0,#4]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000338  6081              STR      r1,[r0,#8]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
00033a  60c1              STR      r1,[r0,#0xc]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00033c  6101              STR      r1,[r0,#0x10]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00033e  6141              STR      r1,[r0,#0x14]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
000340  6181              STR      r1,[r0,#0x18]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000342  61c1              STR      r1,[r0,#0x1c]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000344  6201              STR      r1,[r0,#0x20]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000346  6241              STR      r1,[r0,#0x24]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000348  6281              STR      r1,[r0,#0x28]
;;;284    }
00034a  4770              BX       lr
;;;285    
                          ENDP

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
00034c  b570              PUSH     {r4-r6,lr}
;;;295    {
00034e  4604              MOV      r4,r0
000350  460d              MOV      r5,r1
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000352  4824              LDR      r0,|L1.996|
000354  4284              CMP      r4,r0
000356  d02a              BEQ      |L1.942|
000358  4822              LDR      r0,|L1.996|
00035a  3014              ADDS     r0,r0,#0x14
00035c  4284              CMP      r4,r0
00035e  d026              BEQ      |L1.942|
000360  4820              LDR      r0,|L1.996|
000362  3028              ADDS     r0,r0,#0x28
000364  4284              CMP      r4,r0
000366  d022              BEQ      |L1.942|
000368  481e              LDR      r0,|L1.996|
00036a  303c              ADDS     r0,r0,#0x3c
00036c  4284              CMP      r4,r0
00036e  d01e              BEQ      |L1.942|
000370  481c              LDR      r0,|L1.996|
000372  3050              ADDS     r0,r0,#0x50
000374  4284              CMP      r4,r0
000376  d01a              BEQ      |L1.942|
000378  481a              LDR      r0,|L1.996|
00037a  3064              ADDS     r0,r0,#0x64
00037c  4284              CMP      r4,r0
00037e  d016              BEQ      |L1.942|
000380  4818              LDR      r0,|L1.996|
000382  3078              ADDS     r0,r0,#0x78
000384  4284              CMP      r4,r0
000386  d012              BEQ      |L1.942|
000388  4817              LDR      r0,|L1.1000|
00038a  4284              CMP      r4,r0
00038c  d00f              BEQ      |L1.942|
00038e  4816              LDR      r0,|L1.1000|
000390  3014              ADDS     r0,r0,#0x14
000392  4284              CMP      r4,r0
000394  d00b              BEQ      |L1.942|
000396  4814              LDR      r0,|L1.1000|
000398  3028              ADDS     r0,r0,#0x28
00039a  4284              CMP      r4,r0
00039c  d007              BEQ      |L1.942|
00039e  4812              LDR      r0,|L1.1000|
0003a0  303c              ADDS     r0,r0,#0x3c
0003a2  4284              CMP      r4,r0
0003a4  d003              BEQ      |L1.942|
0003a6  4810              LDR      r0,|L1.1000|
0003a8  3050              ADDS     r0,r0,#0x50
0003aa  4284              CMP      r4,r0
0003ac  d100              BNE      |L1.944|
                  |L1.942|
0003ae  e004              B        |L1.954|
                  |L1.944|
0003b0  f2401129          MOV      r1,#0x129
0003b4  a00d              ADR      r0,|L1.1004|
0003b6  f7fffffe          BL       assert_failed
                  |L1.954|
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
0003ba  b10d              CBZ      r5,|L1.960|
0003bc  2d01              CMP      r5,#1
0003be  d100              BNE      |L1.962|
                  |L1.960|
0003c0  e004              B        |L1.972|
                  |L1.962|
0003c2  f44f7195          MOV      r1,#0x12a
0003c6  a009              ADR      r0,|L1.1004|
0003c8  f7fffffe          BL       assert_failed
                  |L1.972|
;;;299    
;;;300      if (NewState != DISABLE)
0003cc  b125              CBZ      r5,|L1.984|
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
0003ce  6820              LDR      r0,[r4,#0]
0003d0  f0400001          ORR      r0,r0,#1
0003d4  6020              STR      r0,[r4,#0]
0003d6  e004              B        |L1.994|
                  |L1.984|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
0003d8  6820              LDR      r0,[r4,#0]
0003da  f64f71fe          MOV      r1,#0xfffe
0003de  4008              ANDS     r0,r0,r1
0003e0  6020              STR      r0,[r4,#0]
                  |L1.994|
;;;309      }
;;;310    }
0003e2  bd70              POP      {r4-r6,pc}
                  |L1.996|
                          DCD      0x40020008
                  |L1.1000|
                          DCD      0x40020408
                  |L1.1004|
0003ec  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
0003f0  544d3332
0003f4  46313078
0003f8  5f537464
0003fc  50657269
000400  70685f44
000404  72697665
000408  725c7372
00040c  635c7374
000410  6d333266
000414  3130785f
000418  646d612e
00041c  6300    
00041e  00                DCB      0
00041f  00                DCB      0
                          ENDP

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000420  b570              PUSH     {r4-r6,lr}
;;;327    {
000422  4604              MOV      r4,r0
000424  460d              MOV      r5,r1
000426  4616              MOV      r6,r2
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000428  48fe              LDR      r0,|L1.2084|
00042a  4284              CMP      r4,r0
00042c  d02a              BEQ      |L1.1156|
00042e  48fd              LDR      r0,|L1.2084|
000430  3014              ADDS     r0,r0,#0x14
000432  4284              CMP      r4,r0
000434  d026              BEQ      |L1.1156|
000436  48fb              LDR      r0,|L1.2084|
000438  3028              ADDS     r0,r0,#0x28
00043a  4284              CMP      r4,r0
00043c  d022              BEQ      |L1.1156|
00043e  48f9              LDR      r0,|L1.2084|
000440  303c              ADDS     r0,r0,#0x3c
000442  4284              CMP      r4,r0
000444  d01e              BEQ      |L1.1156|
000446  48f7              LDR      r0,|L1.2084|
000448  3050              ADDS     r0,r0,#0x50
00044a  4284              CMP      r4,r0
00044c  d01a              BEQ      |L1.1156|
00044e  48f5              LDR      r0,|L1.2084|
000450  3064              ADDS     r0,r0,#0x64
000452  4284              CMP      r4,r0
000454  d016              BEQ      |L1.1156|
000456  48f3              LDR      r0,|L1.2084|
000458  3078              ADDS     r0,r0,#0x78
00045a  4284              CMP      r4,r0
00045c  d012              BEQ      |L1.1156|
00045e  48f2              LDR      r0,|L1.2088|
000460  4284              CMP      r4,r0
000462  d00f              BEQ      |L1.1156|
000464  48f0              LDR      r0,|L1.2088|
000466  3014              ADDS     r0,r0,#0x14
000468  4284              CMP      r4,r0
00046a  d00b              BEQ      |L1.1156|
00046c  48ee              LDR      r0,|L1.2088|
00046e  3028              ADDS     r0,r0,#0x28
000470  4284              CMP      r4,r0
000472  d007              BEQ      |L1.1156|
000474  48ec              LDR      r0,|L1.2088|
000476  303c              ADDS     r0,r0,#0x3c
000478  4284              CMP      r4,r0
00047a  d003              BEQ      |L1.1156|
00047c  48ea              LDR      r0,|L1.2088|
00047e  3050              ADDS     r0,r0,#0x50
000480  4284              CMP      r4,r0
000482  d100              BNE      |L1.1158|
                  |L1.1156|
000484  e005              B        |L1.1170|
                  |L1.1158|
000486  f2401149          MOV      r1,#0x149
00048a  f2af00a0          ADR      r0,|L1.1004|
00048e  f7fffffe          BL       assert_failed
                  |L1.1170|
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
000492  f025000e          BIC      r0,r5,#0xe
000496  b908              CBNZ     r0,|L1.1180|
000498  b105              CBZ      r5,|L1.1180|
00049a  e005              B        |L1.1192|
                  |L1.1180|
00049c  f44f71a5          MOV      r1,#0x14a
0004a0  f2af00b8          ADR      r0,|L1.1004|
0004a4  f7fffffe          BL       assert_failed
                  |L1.1192|
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
0004a8  b10e              CBZ      r6,|L1.1198|
0004aa  2e01              CMP      r6,#1
0004ac  d100              BNE      |L1.1200|
                  |L1.1198|
0004ae  e005              B        |L1.1212|
                  |L1.1200|
0004b0  f240114b          MOV      r1,#0x14b
0004b4  f2af00cc          ADR      r0,|L1.1004|
0004b8  f7fffffe          BL       assert_failed
                  |L1.1212|
;;;332      if (NewState != DISABLE)
0004bc  b11e              CBZ      r6,|L1.1222|
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
0004be  6820              LDR      r0,[r4,#0]
0004c0  4328              ORRS     r0,r0,r5
0004c2  6020              STR      r0,[r4,#0]
0004c4  e002              B        |L1.1228|
                  |L1.1222|
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
0004c6  6820              LDR      r0,[r4,#0]
0004c8  43a8              BICS     r0,r0,r5
0004ca  6020              STR      r0,[r4,#0]
                  |L1.1228|
;;;341      }
;;;342    }
0004cc  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
0004ce  b570              PUSH     {r4-r6,lr}
;;;354    {
0004d0  4604              MOV      r4,r0
0004d2  460d              MOV      r5,r1
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
0004d4  48d3              LDR      r0,|L1.2084|
0004d6  4284              CMP      r4,r0
0004d8  d02a              BEQ      |L1.1328|
0004da  48d2              LDR      r0,|L1.2084|
0004dc  3014              ADDS     r0,r0,#0x14
0004de  4284              CMP      r4,r0
0004e0  d026              BEQ      |L1.1328|
0004e2  48d0              LDR      r0,|L1.2084|
0004e4  3028              ADDS     r0,r0,#0x28
0004e6  4284              CMP      r4,r0
0004e8  d022              BEQ      |L1.1328|
0004ea  48ce              LDR      r0,|L1.2084|
0004ec  303c              ADDS     r0,r0,#0x3c
0004ee  4284              CMP      r4,r0
0004f0  d01e              BEQ      |L1.1328|
0004f2  48cc              LDR      r0,|L1.2084|
0004f4  3050              ADDS     r0,r0,#0x50
0004f6  4284              CMP      r4,r0
0004f8  d01a              BEQ      |L1.1328|
0004fa  48ca              LDR      r0,|L1.2084|
0004fc  3064              ADDS     r0,r0,#0x64
0004fe  4284              CMP      r4,r0
000500  d016              BEQ      |L1.1328|
000502  48c8              LDR      r0,|L1.2084|
000504  3078              ADDS     r0,r0,#0x78
000506  4284              CMP      r4,r0
000508  d012              BEQ      |L1.1328|
00050a  48c7              LDR      r0,|L1.2088|
00050c  4284              CMP      r4,r0
00050e  d00f              BEQ      |L1.1328|
000510  48c5              LDR      r0,|L1.2088|
000512  3014              ADDS     r0,r0,#0x14
000514  4284              CMP      r4,r0
000516  d00b              BEQ      |L1.1328|
000518  48c3              LDR      r0,|L1.2088|
00051a  3028              ADDS     r0,r0,#0x28
00051c  4284              CMP      r4,r0
00051e  d007              BEQ      |L1.1328|
000520  48c1              LDR      r0,|L1.2088|
000522  303c              ADDS     r0,r0,#0x3c
000524  4284              CMP      r4,r0
000526  d003              BEQ      |L1.1328|
000528  48bf              LDR      r0,|L1.2088|
00052a  3050              ADDS     r0,r0,#0x50
00052c  4284              CMP      r4,r0
00052e  d100              BNE      |L1.1330|
                  |L1.1328|
000530  e005              B        |L1.1342|
                  |L1.1330|
000532  f44f71b2          MOV      r1,#0x164
000536  f2af104c          ADR      r0,|L1.1004|
00053a  f7fffffe          BL       assert_failed
                  |L1.1342|
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
00053e  6065              STR      r5,[r4,#4]
;;;361    }
000540  bd70              POP      {r4-r6,pc}
;;;362    
                          ENDP

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000542  b510              PUSH     {r4,lr}
;;;372    {
000544  4604              MOV      r4,r0
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000546  48b7              LDR      r0,|L1.2084|
000548  4284              CMP      r4,r0
00054a  d02a              BEQ      |L1.1442|
00054c  48b5              LDR      r0,|L1.2084|
00054e  3014              ADDS     r0,r0,#0x14
000550  4284              CMP      r4,r0
000552  d026              BEQ      |L1.1442|
000554  48b3              LDR      r0,|L1.2084|
000556  3028              ADDS     r0,r0,#0x28
000558  4284              CMP      r4,r0
00055a  d022              BEQ      |L1.1442|
00055c  48b1              LDR      r0,|L1.2084|
00055e  303c              ADDS     r0,r0,#0x3c
000560  4284              CMP      r4,r0
000562  d01e              BEQ      |L1.1442|
000564  48af              LDR      r0,|L1.2084|
000566  3050              ADDS     r0,r0,#0x50
000568  4284              CMP      r4,r0
00056a  d01a              BEQ      |L1.1442|
00056c  48ad              LDR      r0,|L1.2084|
00056e  3064              ADDS     r0,r0,#0x64
000570  4284              CMP      r4,r0
000572  d016              BEQ      |L1.1442|
000574  48ab              LDR      r0,|L1.2084|
000576  3078              ADDS     r0,r0,#0x78
000578  4284              CMP      r4,r0
00057a  d012              BEQ      |L1.1442|
00057c  48aa              LDR      r0,|L1.2088|
00057e  4284              CMP      r4,r0
000580  d00f              BEQ      |L1.1442|
000582  48a9              LDR      r0,|L1.2088|
000584  3014              ADDS     r0,r0,#0x14
000586  4284              CMP      r4,r0
000588  d00b              BEQ      |L1.1442|
00058a  48a7              LDR      r0,|L1.2088|
00058c  3028              ADDS     r0,r0,#0x28
00058e  4284              CMP      r4,r0
000590  d007              BEQ      |L1.1442|
000592  48a5              LDR      r0,|L1.2088|
000594  303c              ADDS     r0,r0,#0x3c
000596  4284              CMP      r4,r0
000598  d003              BEQ      |L1.1442|
00059a  48a3              LDR      r0,|L1.2088|
00059c  3050              ADDS     r0,r0,#0x50
00059e  4284              CMP      r4,r0
0005a0  d100              BNE      |L1.1444|
                  |L1.1442|
0005a2  e005              B        |L1.1456|
                  |L1.1444|
0005a4  f44f71bb          MOV      r1,#0x176
0005a8  f2af10c0          ADR      r0,|L1.1004|
0005ac  f7fffffe          BL       assert_failed
                  |L1.1456|
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
0005b0  6860              LDR      r0,[r4,#4]
0005b2  b280              UXTH     r0,r0
;;;377    }
0005b4  bd10              POP      {r4,pc}
;;;378    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
0005b6  b570              PUSH     {r4-r6,lr}
;;;434    {
0005b8  4604              MOV      r4,r0
;;;435      FlagStatus bitstatus = RESET;
0005ba  2500              MOVS     r5,#0
;;;436      uint32_t tmpreg = 0;
0005bc  2600              MOVS     r6,#0
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
0005be  2c01              CMP      r4,#1
0005c0  d07e              BEQ      |L1.1728|
0005c2  2c02              CMP      r4,#2
0005c4  d07c              BEQ      |L1.1728|
0005c6  2c04              CMP      r4,#4
0005c8  d07a              BEQ      |L1.1728|
0005ca  2c08              CMP      r4,#8
0005cc  d078              BEQ      |L1.1728|
0005ce  2c10              CMP      r4,#0x10
0005d0  d076              BEQ      |L1.1728|
0005d2  2c20              CMP      r4,#0x20
0005d4  d074              BEQ      |L1.1728|
0005d6  2c40              CMP      r4,#0x40
0005d8  d072              BEQ      |L1.1728|
0005da  2c80              CMP      r4,#0x80
0005dc  d07f              BEQ      |L1.1758|
0005de  f5b47f80          CMP      r4,#0x100
0005e2  d07c              BEQ      |L1.1758|
0005e4  f5b47f00          CMP      r4,#0x200
0005e8  d079              BEQ      |L1.1758|
0005ea  f5b46f80          CMP      r4,#0x400
0005ee  d076              BEQ      |L1.1758|
0005f0  f5b46f00          CMP      r4,#0x800
0005f4  d073              BEQ      |L1.1758|
0005f6  f5b45f80          CMP      r4,#0x1000
0005fa  d070              BEQ      |L1.1758|
0005fc  f5b45f00          CMP      r4,#0x2000
000600  d06d              BEQ      |L1.1758|
000602  f5b44f80          CMP      r4,#0x4000
000606  d06a              BEQ      |L1.1758|
000608  f5b44f00          CMP      r4,#0x8000
00060c  d067              BEQ      |L1.1758|
00060e  f5b43f80          CMP      r4,#0x10000
000612  d064              BEQ      |L1.1758|
000614  f5b43f00          CMP      r4,#0x20000
000618  d061              BEQ      |L1.1758|
00061a  f5b42f80          CMP      r4,#0x40000
00061e  d05e              BEQ      |L1.1758|
000620  f5b42f00          CMP      r4,#0x80000
000624  d05b              BEQ      |L1.1758|
000626  f5b41f80          CMP      r4,#0x100000
00062a  d058              BEQ      |L1.1758|
00062c  f5b41f00          CMP      r4,#0x200000
000630  d055              BEQ      |L1.1758|
000632  f5b40f80          CMP      r4,#0x400000
000636  d052              BEQ      |L1.1758|
000638  f5b40f00          CMP      r4,#0x800000
00063c  d04f              BEQ      |L1.1758|
00063e  f1b47f80          CMP      r4,#0x1000000
000642  d04c              BEQ      |L1.1758|
000644  f1b47f00          CMP      r4,#0x2000000
000648  d049              BEQ      |L1.1758|
00064a  f1b46f80          CMP      r4,#0x4000000
00064e  d046              BEQ      |L1.1758|
000650  f1b46f00          CMP      r4,#0x8000000
000654  d043              BEQ      |L1.1758|
000656  4875              LDR      r0,|L1.2092|
000658  4284              CMP      r4,r0
00065a  d040              BEQ      |L1.1758|
00065c  1c40              ADDS     r0,r0,#1
00065e  4284              CMP      r4,r0
000660  d03d              BEQ      |L1.1758|
000662  1c80              ADDS     r0,r0,#2
000664  4284              CMP      r4,r0
000666  d03a              BEQ      |L1.1758|
000668  1d00              ADDS     r0,r0,#4
00066a  4284              CMP      r4,r0
00066c  d037              BEQ      |L1.1758|
00066e  486f              LDR      r0,|L1.2092|
000670  300f              ADDS     r0,r0,#0xf
000672  4284              CMP      r4,r0
000674  d033              BEQ      |L1.1758|
000676  486d              LDR      r0,|L1.2092|
000678  301f              ADDS     r0,r0,#0x1f
00067a  4284              CMP      r4,r0
00067c  d02f              BEQ      |L1.1758|
00067e  486b              LDR      r0,|L1.2092|
000680  303f              ADDS     r0,r0,#0x3f
000682  4284              CMP      r4,r0
000684  d02b              BEQ      |L1.1758|
000686  4869              LDR      r0,|L1.2092|
000688  307f              ADDS     r0,r0,#0x7f
00068a  4284              CMP      r4,r0
00068c  d027              BEQ      |L1.1758|
00068e  4867              LDR      r0,|L1.2092|
000690  30ff              ADDS     r0,r0,#0xff
000692  4284              CMP      r4,r0
000694  d023              BEQ      |L1.1758|
000696  4866              LDR      r0,|L1.2096|
000698  4284              CMP      r4,r0
00069a  d020              BEQ      |L1.1758|
00069c  4865              LDR      r0,|L1.2100|
00069e  4284              CMP      r4,r0
0006a0  d01d              BEQ      |L1.1758|
0006a2  4865              LDR      r0,|L1.2104|
0006a4  4284              CMP      r4,r0
0006a6  d01a              BEQ      |L1.1758|
0006a8  f1b42f10          CMP      r4,#0x10001000
0006ac  d017              BEQ      |L1.1758|
0006ae  ea4f30f0          ROR      r0,r0,#15
0006b2  4284              CMP      r4,r0
0006b4  d013              BEQ      |L1.1758|
0006b6  4861              LDR      r0,|L1.2108|
0006b8  4284              CMP      r4,r0
0006ba  d010              BEQ      |L1.1758|
0006bc  4860              LDR      r0,|L1.2112|
0006be  e000              B        |L1.1730|
                  |L1.1728|
0006c0  e00d              B        |L1.1758|
                  |L1.1730|
0006c2  4284              CMP      r4,r0
0006c4  d00b              BEQ      |L1.1758|
0006c6  485f              LDR      r0,|L1.2116|
0006c8  4284              CMP      r4,r0
0006ca  d008              BEQ      |L1.1758|
0006cc  485e              LDR      r0,|L1.2120|
0006ce  4284              CMP      r4,r0
0006d0  d005              BEQ      |L1.1758|
0006d2  485e              LDR      r0,|L1.2124|
0006d4  4284              CMP      r4,r0
0006d6  d002              BEQ      |L1.1758|
0006d8  485d              LDR      r0,|L1.2128|
0006da  4284              CMP      r4,r0
0006dc  d100              BNE      |L1.1760|
                  |L1.1758|
0006de  e005              B        |L1.1772|
                  |L1.1760|
0006e0  f24011b7          MOV      r1,#0x1b7
0006e4  f2af20fc          ADR      r0,|L1.1004|
0006e8  f7fffffe          BL       assert_failed
                  |L1.1772|
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
0006ec  f0045080          AND      r0,r4,#0x10000000
0006f0  b118              CBZ      r0,|L1.1786|
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
0006f2  484d              LDR      r0,|L1.2088|
0006f4  3808              SUBS     r0,r0,#8
0006f6  6806              LDR      r6,[r0,#0]
0006f8  e002              B        |L1.1792|
                  |L1.1786|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
0006fa  484a              LDR      r0,|L1.2084|
0006fc  3808              SUBS     r0,r0,#8
0006fe  6806              LDR      r6,[r0,#0]
                  |L1.1792|
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000700  ea060004          AND      r0,r6,r4
000704  b108              CBZ      r0,|L1.1802|
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
000706  2501              MOVS     r5,#1
000708  e000              B        |L1.1804|
                  |L1.1802|
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
00070a  2500              MOVS     r5,#0
                  |L1.1804|
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
00070c  4628              MOV      r0,r5
;;;467    }
00070e  bd70              POP      {r4-r6,pc}
;;;468    
                          ENDP

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000710  b510              PUSH     {r4,lr}
;;;524    {
000712  4604              MOV      r4,r0
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
000714  f0044070          AND      r0,r4,#0xf0000000
000718  b110              CBZ      r0,|L1.1824|
00071a  484e              LDR      r0,|L1.2132|
00071c  4020              ANDS     r0,r0,r4
00071e  b908              CBNZ     r0,|L1.1828|
                  |L1.1824|
000720  b104              CBZ      r4,|L1.1828|
000722  e005              B        |L1.1840|
                  |L1.1828|
000724  f240210e          MOV      r1,#0x20e
000728  f2af3040          ADR      r0,|L1.1004|
00072c  f7fffffe          BL       assert_failed
                  |L1.1840|
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
000730  f0045080          AND      r0,r4,#0x10000000
000734  b118              CBZ      r0,|L1.1854|
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
000736  483c              LDR      r0,|L1.2088|
000738  1f00              SUBS     r0,r0,#4
00073a  6004              STR      r4,[r0,#0]
00073c  e002              B        |L1.1860|
                  |L1.1854|
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
00073e  4839              LDR      r0,|L1.2084|
000740  3808              SUBS     r0,r0,#8
000742  6044              STR      r4,[r0,#4]
                  |L1.1860|
;;;538      }
;;;539    }
000744  bd10              POP      {r4,pc}
;;;540    
                          ENDP

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000746  b570              PUSH     {r4-r6,lr}
;;;596    {
000748  4604              MOV      r4,r0
;;;597      ITStatus bitstatus = RESET;
00074a  2500              MOVS     r5,#0
;;;598      uint32_t tmpreg = 0;
00074c  2600              MOVS     r6,#0
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
00074e  2c01              CMP      r4,#1
000750  d066              BEQ      |L1.2080|
000752  2c02              CMP      r4,#2
000754  d064              BEQ      |L1.2080|
000756  2c04              CMP      r4,#4
000758  d062              BEQ      |L1.2080|
00075a  2c08              CMP      r4,#8
00075c  d060              BEQ      |L1.2080|
00075e  2c10              CMP      r4,#0x10
000760  d05e              BEQ      |L1.2080|
000762  2c20              CMP      r4,#0x20
000764  d05c              BEQ      |L1.2080|
000766  2c40              CMP      r4,#0x40
000768  d05a              BEQ      |L1.2080|
00076a  2c80              CMP      r4,#0x80
00076c  d058              BEQ      |L1.2080|
00076e  f5b47f80          CMP      r4,#0x100
000772  d055              BEQ      |L1.2080|
000774  f5b47f00          CMP      r4,#0x200
000778  d052              BEQ      |L1.2080|
00077a  f5b46f80          CMP      r4,#0x400
00077e  d04f              BEQ      |L1.2080|
000780  f5b46f00          CMP      r4,#0x800
000784  d04c              BEQ      |L1.2080|
000786  f5b45f80          CMP      r4,#0x1000
00078a  d049              BEQ      |L1.2080|
00078c  f5b45f00          CMP      r4,#0x2000
000790  d046              BEQ      |L1.2080|
000792  f5b44f80          CMP      r4,#0x4000
000796  d043              BEQ      |L1.2080|
000798  f5b44f00          CMP      r4,#0x8000
00079c  d040              BEQ      |L1.2080|
00079e  f5b43f80          CMP      r4,#0x10000
0007a2  d07f              BEQ      |L1.2212|
0007a4  f5b43f00          CMP      r4,#0x20000
0007a8  d07c              BEQ      |L1.2212|
0007aa  f5b42f80          CMP      r4,#0x40000
0007ae  d079              BEQ      |L1.2212|
0007b0  f5b42f00          CMP      r4,#0x80000
0007b4  d076              BEQ      |L1.2212|
0007b6  f5b41f80          CMP      r4,#0x100000
0007ba  d073              BEQ      |L1.2212|
0007bc  f5b41f00          CMP      r4,#0x200000
0007c0  d070              BEQ      |L1.2212|
0007c2  f5b40f80          CMP      r4,#0x400000
0007c6  d06d              BEQ      |L1.2212|
0007c8  f5b40f00          CMP      r4,#0x800000
0007cc  d06a              BEQ      |L1.2212|
0007ce  f1b47f80          CMP      r4,#0x1000000
0007d2  d067              BEQ      |L1.2212|
0007d4  f1b47f00          CMP      r4,#0x2000000
0007d8  d064              BEQ      |L1.2212|
0007da  f1b46f80          CMP      r4,#0x4000000
0007de  d061              BEQ      |L1.2212|
0007e0  f1b46f00          CMP      r4,#0x8000000
0007e4  d05e              BEQ      |L1.2212|
0007e6  4811              LDR      r0,|L1.2092|
0007e8  4284              CMP      r4,r0
0007ea  d05b              BEQ      |L1.2212|
0007ec  1c40              ADDS     r0,r0,#1
0007ee  4284              CMP      r4,r0
0007f0  d058              BEQ      |L1.2212|
0007f2  1c80              ADDS     r0,r0,#2
0007f4  4284              CMP      r4,r0
0007f6  d055              BEQ      |L1.2212|
0007f8  1d00              ADDS     r0,r0,#4
0007fa  4284              CMP      r4,r0
0007fc  d052              BEQ      |L1.2212|
0007fe  480b              LDR      r0,|L1.2092|
000800  300f              ADDS     r0,r0,#0xf
000802  4284              CMP      r4,r0
000804  d04e              BEQ      |L1.2212|
000806  4809              LDR      r0,|L1.2092|
000808  301f              ADDS     r0,r0,#0x1f
00080a  4284              CMP      r4,r0
00080c  d04a              BEQ      |L1.2212|
00080e  4807              LDR      r0,|L1.2092|
000810  303f              ADDS     r0,r0,#0x3f
000812  4284              CMP      r4,r0
000814  d046              BEQ      |L1.2212|
000816  4805              LDR      r0,|L1.2092|
000818  307f              ADDS     r0,r0,#0x7f
00081a  4284              CMP      r4,r0
00081c  d042              BEQ      |L1.2212|
00081e  e01b              B        |L1.2136|
                  |L1.2080|
000820  e040              B        |L1.2212|
000822  0000              DCW      0x0000
                  |L1.2084|
                          DCD      0x40020008
                  |L1.2088|
                          DCD      0x40020408
                  |L1.2092|
                          DCD      0x10000001
                  |L1.2096|
                          DCD      0x10000200
                  |L1.2100|
                          DCD      0x10000400
                  |L1.2104|
                          DCD      0x10000800
                  |L1.2108|
                          DCD      0x10004000
                  |L1.2112|
                          DCD      0x10008000
                  |L1.2116|
                          DCD      0x10010000
                  |L1.2120|
                          DCD      0x10020000
                  |L1.2124|
                          DCD      0x10040000
                  |L1.2128|
                          DCD      0x10080000
                  |L1.2132|
                          DCD      0xeff00000
                  |L1.2136|
000858  482b              LDR      r0,|L1.2312|
00085a  30ff              ADDS     r0,r0,#0xff
00085c  4284              CMP      r4,r0
00085e  d021              BEQ      |L1.2212|
000860  482a              LDR      r0,|L1.2316|
000862  4284              CMP      r4,r0
000864  d01e              BEQ      |L1.2212|
000866  482a              LDR      r0,|L1.2320|
000868  4284              CMP      r4,r0
00086a  d01b              BEQ      |L1.2212|
00086c  4829              LDR      r0,|L1.2324|
00086e  4284              CMP      r4,r0
000870  d018              BEQ      |L1.2212|
000872  f1b42f10          CMP      r4,#0x10001000
000876  d015              BEQ      |L1.2212|
000878  ea4f30f0          ROR      r0,r0,#15
00087c  4284              CMP      r4,r0
00087e  d011              BEQ      |L1.2212|
000880  4825              LDR      r0,|L1.2328|
000882  4284              CMP      r4,r0
000884  d00e              BEQ      |L1.2212|
000886  4825              LDR      r0,|L1.2332|
000888  4284              CMP      r4,r0
00088a  d00b              BEQ      |L1.2212|
00088c  4824              LDR      r0,|L1.2336|
00088e  4284              CMP      r4,r0
000890  d008              BEQ      |L1.2212|
000892  4824              LDR      r0,|L1.2340|
000894  4284              CMP      r4,r0
000896  d005              BEQ      |L1.2212|
000898  4823              LDR      r0,|L1.2344|
00089a  4284              CMP      r4,r0
00089c  d002              BEQ      |L1.2212|
00089e  4823              LDR      r0,|L1.2348|
0008a0  4284              CMP      r4,r0
0008a2  d100              BNE      |L1.2214|
                  |L1.2212|
0008a4  e005              B        |L1.2226|
                  |L1.2214|
0008a6  f2402159          MOV      r1,#0x259
0008aa  f2af40c0          ADR      r0,|L1.1004|
0008ae  f7fffffe          BL       assert_failed
                  |L1.2226|
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
0008b2  f0045080          AND      r0,r4,#0x10000000
0008b6  b110              CBZ      r0,|L1.2238|
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
0008b8  481d              LDR      r0,|L1.2352|
0008ba  6806              LDR      r6,[r0,#0]
0008bc  e001              B        |L1.2242|
                  |L1.2238|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
0008be  481d              LDR      r0,|L1.2356|
0008c0  6806              LDR      r6,[r0,#0]
                  |L1.2242|
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
0008c2  ea060004          AND      r0,r6,r4
0008c6  b108              CBZ      r0,|L1.2252|
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
0008c8  2501              MOVS     r5,#1
0008ca  e000              B        |L1.2254|
                  |L1.2252|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
0008cc  2500              MOVS     r5,#0
                  |L1.2254|
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
0008ce  4628              MOV      r0,r5
;;;628    }
0008d0  bd70              POP      {r4-r6,pc}
;;;629    
                          ENDP

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
0008d2  b510              PUSH     {r4,lr}
;;;685    {
0008d4  4604              MOV      r4,r0
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
0008d6  f0044070          AND      r0,r4,#0xf0000000
0008da  b110              CBZ      r0,|L1.2274|
0008dc  4816              LDR      r0,|L1.2360|
0008de  4020              ANDS     r0,r0,r4
0008e0  b908              CBNZ     r0,|L1.2278|
                  |L1.2274|
0008e2  b104              CBZ      r4,|L1.2278|
0008e4  e005              B        |L1.2290|
                  |L1.2278|
0008e6  f24021af          MOV      r1,#0x2af
0008ea  f2af5000          ADR      r0,|L1.1004|
0008ee  f7fffffe          BL       assert_failed
                  |L1.2290|
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
0008f2  f0045080          AND      r0,r4,#0x10000000
0008f6  b118              CBZ      r0,|L1.2304|
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
0008f8  480d              LDR      r0,|L1.2352|
0008fa  1d00              ADDS     r0,r0,#4
0008fc  6004              STR      r4,[r0,#0]
0008fe  e001              B        |L1.2308|
                  |L1.2304|
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
000900  480c              LDR      r0,|L1.2356|
000902  6044              STR      r4,[r0,#4]
                  |L1.2308|
;;;699      }
;;;700    }
000904  bd10              POP      {r4,pc}
;;;701    
                          ENDP

000906  0000              DCW      0x0000
                  |L1.2312|
                          DCD      0x10000001
                  |L1.2316|
                          DCD      0x10000200
                  |L1.2320|
                          DCD      0x10000400
                  |L1.2324|
                          DCD      0x10000800
                  |L1.2328|
                          DCD      0x10004000
                  |L1.2332|
                          DCD      0x10008000
                  |L1.2336|
                          DCD      0x10010000
                  |L1.2340|
                          DCD      0x10020000
                  |L1.2344|
                          DCD      0x10040000
                  |L1.2348|
                          DCD      0x10080000
                  |L1.2352|
                          DCD      0x40020400
                  |L1.2356|
                          DCD      0x40020000
                  |L1.2360|
                          DCD      0xeff00000
