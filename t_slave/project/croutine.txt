; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\croutine.o --asm_dir=.\ --list_dir=.\ --depend=.\croutine.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I..\project -I..\..\rtos -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\croutine.crf ..\..\rtos\croutine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  xCoRoutineCreate PROC
;;;136    
;;;137    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;138    {
000004  4682              MOV      r10,r0
000006  4691              MOV      r9,r2
000008  460f              MOV      r7,r1
;;;139    BaseType_t xReturn;
;;;140    CRCB_t *pxCoRoutine;
;;;141    
;;;142    	/* Allocate the memory that will store the co-routine control block. */
;;;143    	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       pvPortMalloc
000010  0004              MOVS     r4,r0
;;;144    	if( pxCoRoutine )
000012  d045              BEQ      |L1.160|
;;;145    	{
;;;146    		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
;;;147    		be created and the co-routine data structures need initialising. */
;;;148    		if( pxCurrentCoRoutine == NULL )
000014  4d81              LDR      r5,|L1.540|
000016  f8df8208          LDR      r8,|L1.544|
00001a  6828              LDR      r0,[r5,#0]  ; pxCurrentCoRoutine
00001c  b9e0              CBNZ     r0,|L1.88|
00001e  2600              MOVS     r6,#0
000020  f8c54000          STR.W    r4,[r5,#0]
                  |L1.36|
000024  eb060186          ADD      r1,r6,r6,LSL #2
000028  eb080081          ADD      r0,r8,r1,LSL #2
00002c  f7fffffe          BL       vListInitialise
000030  1c76              ADDS     r6,r6,#1
000032  2e02              CMP      r6,#2
000034  d3f6              BCC      |L1.36|
000036  487a              LDR      r0,|L1.544|
000038  3028              ADDS     r0,r0,#0x28
00003a  f7fffffe          BL       vListInitialise
00003e  4878              LDR      r0,|L1.544|
000040  303c              ADDS     r0,r0,#0x3c
000042  f7fffffe          BL       vListInitialise
000046  4876              LDR      r0,|L1.544|
000048  3050              ADDS     r0,r0,#0x50
00004a  f7fffffe          BL       vListInitialise
00004e  4874              LDR      r0,|L1.544|
000050  3028              ADDS     r0,r0,#0x28
000052  6168              STR      r0,[r5,#0x14]  ; pxDelayedCoRoutineList
000054  3014              ADDS     r0,r0,#0x14
000056  61a8              STR      r0,[r5,#0x18]  ; pxOverflowDelayedCoRoutineList
                  |L1.88|
;;;149    		{
;;;150    			pxCurrentCoRoutine = pxCoRoutine;
;;;151    			prvInitialiseCoRoutineLists();
;;;152    		}
;;;153    
;;;154    		/* Check the priority is within limits. */
;;;155    		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
000058  2f02              CMP      r7,#2
00005a  d300              BCC      |L1.94|
;;;156    		{
;;;157    			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
00005c  2701              MOVS     r7,#1
                  |L1.94|
;;;158    		}
;;;159    
;;;160    		/* Fill out the co-routine control block from the function parameters. */
;;;161    		pxCoRoutine->uxState = corINITIAL_STATE;
00005e  2000              MOVS     r0,#0
000060  86a0              STRH     r0,[r4,#0x34]
;;;162    		pxCoRoutine->uxPriority = uxPriority;
;;;163    		pxCoRoutine->uxIndex = uxIndex;
;;;164    		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
;;;165    
;;;166    		/* Initialise all the other co-routine control block parameters. */
;;;167    		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
000062  f8c4a000          STR      r10,[r4,#0]
000066  e9c4790b          STRD     r7,r9,[r4,#0x2c]
00006a  1d20              ADDS     r0,r4,#4
00006c  f7fffffe          BL       vListInitialiseItem
;;;168    		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
000070  f1040018          ADD      r0,r4,#0x18
000074  f7fffffe          BL       vListInitialiseItem
;;;169    
;;;170    		/* Set the co-routine control block as a link back from the ListItem_t.
;;;171    		This is so we can get back to the containing CRCB from a generic item
;;;172    		in a list. */
;;;173    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
000078  6124              STR      r4,[r4,#0x10]
;;;174    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
00007a  6264              STR      r4,[r4,#0x24]
;;;175    
;;;176    		/* Event lists are always in priority order. */
;;;177    		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
00007c  f1c70002          RSB      r0,r7,#2
;;;178    
;;;179    		/* Now the co-routine has been initialised it can be added to the ready
;;;180    		list at the correct priority. */
;;;181    		prvAddCoRoutineToReadyQueue( pxCoRoutine );
000080  61a0              STR      r0,[r4,#0x18]
000082  6ae0              LDR      r0,[r4,#0x2c]
000084  6869              LDR      r1,[r5,#4]  ; uxTopCoRoutineReadyPriority
000086  4288              CMP      r0,r1
000088  d900              BLS      |L1.140|
00008a  6068              STR      r0,[r5,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.140|
00008c  eb000180          ADD      r1,r0,r0,LSL #2
000090  eb080081          ADD      r0,r8,r1,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
;;;182    
;;;183    		xReturn = pdPASS;
00009a  2001              MOVS     r0,#1
                  |L1.156|
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;188    	}
;;;189    
;;;190    	return xReturn;
;;;191    }
00009c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.160|
0000a0  f04f30ff          MOV      r0,#0xffffffff        ;187
0000a4  e7fa              B        |L1.156|
;;;192    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineAddToDelayedList PROC
;;;193    
;;;194    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
0000a6  b570              PUSH     {r4-r6,lr}
;;;195    {
;;;196    TickType_t xTimeToWake;
;;;197    
;;;198    	/* Calculate the time to wake - this may overflow but this is
;;;199    	not a problem. */
;;;200    	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
0000a8  4c5c              LDR      r4,|L1.540|
0000aa  460e              MOV      r6,r1                 ;195
0000ac  68a1              LDR      r1,[r4,#8]  ; xCoRoutineTickCount
0000ae  180d              ADDS     r5,r1,r0
;;;201    
;;;202    	/* We must remove ourselves from the ready list before adding
;;;203    	ourselves to the blocked list as the same list item is used for
;;;204    	both lists. */
;;;205    	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000b0  6820              LDR      r0,[r4,#0]  ; pxCurrentCoRoutine
0000b2  1d00              ADDS     r0,r0,#4
0000b4  f7fffffe          BL       uxListRemove
;;;206    
;;;207    	/* The list item will be inserted in wake time order. */
;;;208    	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
0000b8  6821              LDR      r1,[r4,#0]  ; pxCurrentCoRoutine
;;;209    
;;;210    	if( xTimeToWake < xCoRoutineTickCount )
0000ba  604d              STR      r5,[r1,#4]
0000bc  68a0              LDR      r0,[r4,#8]  ; xCoRoutineTickCount
0000be  4285              CMP      r5,r0
0000c0  d201              BCS      |L1.198|
;;;211    	{
;;;212    		/* Wake time has overflowed.  Place this item in the
;;;213    		overflow list. */
;;;214    		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000c2  69a0              LDR      r0,[r4,#0x18]  ; pxOverflowDelayedCoRoutineList
0000c4  e000              B        |L1.200|
                  |L1.198|
;;;215    	}
;;;216    	else
;;;217    	{
;;;218    		/* The wake time has not overflowed, so we can use the
;;;219    		current block list. */
;;;220    		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000c6  6960              LDR      r0,[r4,#0x14]  ; pxDelayedCoRoutineList
                  |L1.200|
0000c8  1d09              ADDS     r1,r1,#4
0000ca  f7fffffe          BL       vListInsert
0000ce  2e00              CMP      r6,#0
0000d0  d006              BEQ      |L1.224|
;;;221    	}
;;;222    
;;;223    	if( pxEventList )
;;;224    	{
;;;225    		/* Also add the co-routine to an event list.  If this is done then the
;;;226    		function must be called with interrupts disabled. */
;;;227    		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
0000d2  6821              LDR      r1,[r4,#0]  ; pxCurrentCoRoutine
0000d4  4630              MOV      r0,r6
0000d6  e8bd4070          POP      {r4-r6,lr}
0000da  3118              ADDS     r1,r1,#0x18
0000dc  f7ffbffe          B.W      vListInsert
                  |L1.224|
;;;228    	}
;;;229    }
0000e0  bd70              POP      {r4-r6,pc}
;;;230    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckDelayedList PROC
;;;254    
;;;255    static void prvCheckDelayedList( void )
0000e2  b570              PUSH     {r4-r6,lr}
;;;256    {
;;;257    CRCB_t *pxCRCB;
;;;258    
;;;259    	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
0000e4  f7fffffe          BL       xTaskGetTickCount
0000e8  4d4c              LDR      r5,|L1.540|
0000ea  68e9              LDR      r1,[r5,#0xc]  ; xLastTickCount
0000ec  1a40              SUBS     r0,r0,r1
;;;260    	while( xPassedTicks )
0000ee  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
0000f0  e02f              B        |L1.338|
                  |L1.242|
;;;261    	{
;;;262    		xCoRoutineTickCount++;
0000f2  68a9              LDR      r1,[r5,#8]  ; xCoRoutineTickCount
0000f4  f1a00001          SUB      r0,r0,#1
0000f8  1c49              ADDS     r1,r1,#1
;;;263    		xPassedTicks--;
;;;264    
;;;265    		/* If the tick count has overflowed we need to swap the ready lists. */
;;;266    		if( xCoRoutineTickCount == 0 )
0000fa  60a9              STR      r1,[r5,#8]  ; xCoRoutineTickCount
0000fc  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
0000fe  d103              BNE      |L1.264|
000100  e9d51005          LDRD     r1,r0,[r5,#0x14]
000104  e9c50105          STRD     r0,r1,[r5,#0x14]
                  |L1.264|
;;;267    		{
;;;268    			List_t * pxTemp;
;;;269    
;;;270    			/* Tick count has overflowed so we need to swap the delay lists.  If there are
;;;271    			any items in pxDelayedCoRoutineList here then there is an error! */
;;;272    			pxTemp = pxDelayedCoRoutineList;
;;;273    			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
;;;274    			pxOverflowDelayedCoRoutineList = pxTemp;
;;;275    		}
;;;276    
;;;277    		/* See if this tick has made a timeout expire. */
;;;278    		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
;;;279    		{
;;;280    			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
;;;281    
;;;282    			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
;;;283    			{
;;;284    				/* Timeout not yet expired. */
;;;285    				break;
;;;286    			}
;;;287    
;;;288    			portDISABLE_INTERRUPTS();
;;;289    			{
;;;290    				/* The event could have occurred just before this critical
;;;291    				section.  If this is the case then the generic list item will
;;;292    				have been moved to the pending ready list and the following
;;;293    				line is still valid.  Also the pvContainer parameter will have
;;;294    				been set to NULL so the following lines are also valid. */
;;;295    				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
;;;296    
;;;297    				/* Is the co-routine waiting on an event also? */
;;;298    				if( pxCRCB->xEventListItem.pvContainer )
;;;299    				{
;;;300    					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
;;;301    				}
;;;302    			}
;;;303    			portENABLE_INTERRUPTS();
;;;304    
;;;305    			prvAddCoRoutineToReadyQueue( pxCRCB );
000108  4e45              LDR      r6,|L1.544|
                  |L1.266|
00010a  6968              LDR      r0,[r5,#0x14]         ;278  ; pxDelayedCoRoutineList
00010c  6801              LDR      r1,[r0,#0]            ;278
00010e  b301              CBZ      r1,|L1.338|
000110  68c0              LDR      r0,[r0,#0xc]          ;280
000112  68c4              LDR      r4,[r0,#0xc]          ;282
000114  68a8              LDR      r0,[r5,#8]            ;282  ; xCoRoutineTickCount
000116  6861              LDR      r1,[r4,#4]            ;282
000118  4281              CMP      r1,r0                 ;282
00011a  d81a              BHI      |L1.338|
00011c  f7fffffe          BL       ulPortSetInterruptMask
000120  1d20              ADDS     r0,r4,#4              ;295
000122  f7fffffe          BL       uxListRemove
000126  6aa0              LDR      r0,[r4,#0x28]         ;298
000128  b118              CBZ      r0,|L1.306|
00012a  f1040018          ADD      r0,r4,#0x18           ;300
00012e  f7fffffe          BL       uxListRemove
                  |L1.306|
000132  2000              MOVS     r0,#0                 ;303
000134  f7fffffe          BL       vPortClearInterruptMask
000138  6ae0              LDR      r0,[r4,#0x2c]
00013a  6869              LDR      r1,[r5,#4]  ; uxTopCoRoutineReadyPriority
00013c  4288              CMP      r0,r1
00013e  d900              BLS      |L1.322|
000140  6068              STR      r0,[r5,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.322|
000142  eb000080          ADD      r0,r0,r0,LSL #2
000146  eb060080          ADD      r0,r6,r0,LSL #2
00014a  1d21              ADDS     r1,r4,#4
00014c  f7fffffe          BL       vListInsertEnd
000150  e7db              B        |L1.266|
                  |L1.338|
000152  6928              LDR      r0,[r5,#0x10]         ;260  ; xPassedTicks
000154  2800              CMP      r0,#0                 ;260
000156  d1cc              BNE      |L1.242|
;;;306    		}
;;;307    	}
;;;308    
;;;309    	xLastTickCount = xCoRoutineTickCount;
000158  68a8              LDR      r0,[r5,#8]  ; xCoRoutineTickCount
00015a  60e8              STR      r0,[r5,#0xc]  ; xLastTickCount
;;;310    }
00015c  bd70              POP      {r4-r6,pc}
;;;311    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineSchedule PROC
;;;312    
;;;313    void vCoRoutineSchedule( void )
00015e  e92d41f0          PUSH     {r4-r8,lr}
;;;314    {
000162  4f2f              LDR      r7,|L1.544|
000164  4e2e              LDR      r6,|L1.544|
000166  3750              ADDS     r7,r7,#0x50
000168  4c2c              LDR      r4,|L1.540|
00016a  e019              B        |L1.416|
                  |L1.364|
00016c  f7fffffe          BL       ulPortSetInterruptMask
000170  68f8              LDR      r0,[r7,#0xc]  ; xPendingReadyCoRoutineList
000172  68c5              LDR      r5,[r0,#0xc]
000174  f1050018          ADD      r0,r5,#0x18
000178  f7fffffe          BL       uxListRemove
00017c  2000              MOVS     r0,#0
00017e  f7fffffe          BL       vPortClearInterruptMask
000182  1d28              ADDS     r0,r5,#4
000184  f7fffffe          BL       uxListRemove
000188  6ae8              LDR      r0,[r5,#0x2c]
00018a  6861              LDR      r1,[r4,#4]  ; uxTopCoRoutineReadyPriority
00018c  4288              CMP      r0,r1
00018e  d900              BLS      |L1.402|
000190  6060              STR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.402|
000192  eb000080          ADD      r0,r0,r0,LSL #2
000196  eb060080          ADD      r0,r6,r0,LSL #2
00019a  1d29              ADDS     r1,r5,#4
00019c  f7fffffe          BL       vListInsertEnd
                  |L1.416|
0001a0  6838              LDR      r0,[r7,#0]  ; xPendingReadyCoRoutineList
0001a2  2800              CMP      r0,#0
0001a4  d1e2              BNE      |L1.364|
;;;315    	/* See if any co-routines readied by events need moving to the ready lists. */
;;;316    	prvCheckPendingReadyList();
;;;317    
;;;318    	/* See if any delayed co-routines have timed out. */
;;;319    	prvCheckDelayedList();
0001a6  f7fffffe          BL       prvCheckDelayedList
;;;320    
;;;321    	/* Find the highest priority queue that contains ready co-routines. */
;;;322    	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
0001aa  6860              LDR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
0001ac  e003              B        |L1.438|
                  |L1.430|
;;;323    	{
;;;324    		if( uxTopCoRoutineReadyPriority == 0 )
0001ae  2800              CMP      r0,#0
0001b0  d01b              BEQ      |L1.490|
0001b2  1e40              SUBS     r0,r0,#1
;;;325    		{
;;;326    			/* No more co-routines to check. */
;;;327    			return;
;;;328    		}
;;;329    		--uxTopCoRoutineReadyPriority;
0001b4  6060              STR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.438|
0001b6  eb000180          ADD      r1,r0,r0,LSL #2       ;322
0001ba  f8561021          LDR      r1,[r6,r1,LSL #2]     ;322
0001be  2900              CMP      r1,#0                 ;322
0001c0  d0f5              BEQ      |L1.430|
;;;330    	}
;;;331    
;;;332    	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
;;;333    	 of the	same priority get an equal share of the processor time. */
;;;334    	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
0001c2  eb000080          ADD      r0,r0,r0,LSL #2
0001c6  eb060080          ADD      r0,r6,r0,LSL #2
0001ca  f1000208          ADD      r2,r0,#8
0001ce  6841              LDR      r1,[r0,#4]
0001d0  6849              LDR      r1,[r1,#4]
0001d2  6041              STR      r1,[r0,#4]
0001d4  4291              CMP      r1,r2
0001d6  d101              BNE      |L1.476|
0001d8  6849              LDR      r1,[r1,#4]
0001da  6041              STR      r1,[r0,#4]
                  |L1.476|
0001dc  68c8              LDR      r0,[r1,#0xc]
;;;335    
;;;336    	/* Call the co-routine. */
;;;337    	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
0001de  6020              STR      r0,[r4,#0]  ; pxCurrentCoRoutine
0001e0  6802              LDR      r2,[r0,#0]
0001e2  6b01              LDR      r1,[r0,#0x30]
0001e4  e8bd41f0          POP      {r4-r8,lr}
0001e8  4710              BX       r2
                  |L1.490|
;;;338    
;;;339    	return;
;;;340    }
0001ea  e8bd81f0          POP      {r4-r8,pc}
;;;341    /*-----------------------------------------------------------*/
                          ENDP

                  xCoRoutineRemoveFromEventList PROC
;;;362    
;;;363    BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
0001ee  b570              PUSH     {r4-r6,lr}
;;;364    {
;;;365    CRCB_t *pxUnblockedCRCB;
;;;366    BaseType_t xReturn;
;;;367    
;;;368    	/* This function is called from within an interrupt.  It can only access
;;;369    	event lists and the pending ready list.  This function assumes that a
;;;370    	check has already been made to ensure pxEventList is not empty. */
;;;371    	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
0001f0  68c0              LDR      r0,[r0,#0xc]
;;;372    	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
0001f2  68c4              LDR      r4,[r0,#0xc]
0001f4  f1040018          ADD      r0,r4,#0x18
0001f8  4605              MOV      r5,r0
0001fa  f7fffffe          BL       uxListRemove
;;;373    	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
0001fe  4808              LDR      r0,|L1.544|
000200  4629              MOV      r1,r5                 ;372
000202  3050              ADDS     r0,r0,#0x50
000204  f7fffffe          BL       vListInsertEnd
;;;374    
;;;375    	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
000208  4904              LDR      r1,|L1.540|
00020a  6ae0              LDR      r0,[r4,#0x2c]
00020c  6809              LDR      r1,[r1,#0]  ; pxCurrentCoRoutine
00020e  6ac9              LDR      r1,[r1,#0x2c]
000210  4288              CMP      r0,r1
000212  d301              BCC      |L1.536|
;;;376    	{
;;;377    		xReturn = pdTRUE;
000214  2001              MOVS     r0,#1
;;;378    	}
;;;379    	else
;;;380    	{
;;;381    		xReturn = pdFALSE;
;;;382    	}
;;;383    
;;;384    	return xReturn;
;;;385    }
000216  bd70              POP      {r4-r6,pc}
                  |L1.536|
000218  2000              MOVS     r0,#0                 ;381
00021a  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

                  |L1.540|
                          DCD      ||.data||
                  |L1.544|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyCoRoutineLists
                          %        40
                  xDelayedCoRoutineList1
                          %        20
                  xDelayedCoRoutineList2
                          %        20
                  xPendingReadyCoRoutineList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentCoRoutine
                          DCD      0x00000000
                  uxTopCoRoutineReadyPriority
                          DCD      0x00000000
                  xCoRoutineTickCount
                          DCD      0x00000000
                  xLastTickCount
                          DCD      0x00000000
                  xPassedTicks
                          DCD      0x00000000
                  pxDelayedCoRoutineList
                          DCD      0x00000000
                  pxOverflowDelayedCoRoutineList
                          DCD      0x00000000
