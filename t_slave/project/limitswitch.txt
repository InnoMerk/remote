; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\limitswitch.o --asm_dir=.\ --list_dir=.\ --depend=.\limitswitch.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\CMSIS\CM3\CoreSupport -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Driver\src -I..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\limitswitch.crf ..\limit_switch\limitSwitch.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  initHardware PROC
;;;85     
;;;86     void initHardware(void)
000000  b508              PUSH     {r3,lr}
;;;87     {
;;;88     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;89       
;;;90       GPIO_InitTypeDef gpio;
;;;91       GPIO_StructInit(&gpio);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GPIO_StructInit
;;;92       gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;93       gpio.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
000016  20c0              MOVS     r0,#0xc0
000018  f8ad0000          STRH     r0,[sp,#0]
;;;94       gpio.GPIO_Speed = GPIO_Speed_2MHz;
00001c  2002              MOVS     r0,#2
00001e  f88d0002          STRB     r0,[sp,#2]
;;;95       GPIO_Init(GPIOC, &gpio);
000022  4669              MOV      r1,sp
000024  4842              LDR      r0,|L1.304|
000026  f7fffffe          BL       GPIO_Init
;;;96     
;;;97     }
00002a  bd08              POP      {r3,pc}
                          ENDP

                  vLimitSwitchTask PROC
;;;6      
;;;7      void vLimitSwitchTask( void* pvParameters)
00002c  b51c              PUSH     {r2-r4,lr}
;;;8      {
;;;9      	initHardware();
00002e  f7fffffe          BL       initHardware
;;;10     	xLimiterQueueCTRL = xQueueCreate( 4, sizeof( uint8_t ) );
000032  2200              MOVS     r2,#0
000034  2101              MOVS     r1,#1
000036  2004              MOVS     r0,#4
000038  f7fffffe          BL       xQueueGenericCreate
00003c  4c3d              LDR      r4,|L1.308|
;;;11     	xLimiterQueueLCD  = xQueueCreate( 4, sizeof( uint8_t ) );
00003e  2200              MOVS     r2,#0
000040  2101              MOVS     r1,#1
000042  6020              STR      r0,[r4,#0]  ; xLimiterQueueCTRL
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       xQueueGenericCreate
;;;12     	
;;;13     	
;;;14     	for(;;)
;;;15     	{
;;;16     		uint8_t rxMode=0;
;;;17     		uint8_t txPosition=0;
;;;18     		if( xQueueReceive( xModeQueueLimit, &rxMode, ( TickType_t ) 10 ) )
00004a  4f3b              LDR      r7,|L1.312|
;;;19         {
;;;20           continue; 
;;;21         }
;;;22     		
;;;23     			if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6))
00004c  4d38              LDR      r5,|L1.304|
00004e  2600              MOVS     r6,#0                 ;11
000050  f8c40004          STR.W    r0,[r4,#4]
                  |L1.84|
000054  f88d6004          STRB     r6,[sp,#4]            ;16
000058  f88d6000          STRB     r6,[sp,#0]            ;17
00005c  2300              MOVS     r3,#0                 ;18
00005e  220a              MOVS     r2,#0xa               ;18
000060  a901              ADD      r1,sp,#4              ;18
000062  6838              LDR      r0,[r7,#0]            ;18  ; xModeQueueLimit
000064  f7fffffe          BL       xQueueGenericReceive
000068  2800              CMP      r0,#0                 ;18
00006a  d1f3              BNE      |L1.84|
00006c  2140              MOVS     r1,#0x40
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       GPIO_ReadInputDataBit
000074  b128              CBZ      r0,|L1.130|
;;;24     			{
;;;25     				vTaskDelay(10/ portTICK_PERIOD_MS);
;;;26     				
;;;27     				if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6))
;;;28     				{
;;;29     					vTaskDelay(10/ portTICK_PERIOD_MS);
;;;30     					
;;;31     					txPosition=UP_LIMIT;
;;;32     					
;;;33     					xQueueSend( xLimiterQueueLCD,  &txPosition, ( TickType_t ) 0 );
;;;34     					xQueueSend( xLimiterQueueCTRL,  &txPosition, ( TickType_t ) 0 );
;;;35     					
;;;36     					
;;;37     					while(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6))
;;;38     					{
;;;39     						
;;;40     						continue;
;;;41     					}
;;;42     					txPosition=UP;
;;;43     					
;;;44     					xQueueSend( xLimiterQueueCTRL,  &txPosition, ( TickType_t ) 0 );
;;;45     					xQueueSend( xLimiterQueueLCD,  &txPosition, ( TickType_t ) 0 );
;;;46     					
;;;47     					
;;;48     				}
;;;49     			}	
;;;50     			
;;;51     			else if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_7))
000076  2180              MOVS     r1,#0x80
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       GPIO_ReadInputDataBit
00007e  b310              CBZ      r0,|L1.198|
000080  e052              B        |L1.296|
                  |L1.130|
000082  200a              MOVS     r0,#0xa               ;25
000084  f7fffffe          BL       vTaskDelay
000088  2140              MOVS     r1,#0x40              ;27
00008a  4628              MOV      r0,r5                 ;27
00008c  f7fffffe          BL       GPIO_ReadInputDataBit
000090  bbf0              CBNZ     r0,|L1.272|
000092  200a              MOVS     r0,#0xa               ;29
000094  f7fffffe          BL       vTaskDelay
000098  201e              MOVS     r0,#0x1e              ;31
00009a  f88d0000          STRB     r0,[sp,#0]            ;31
00009e  2300              MOVS     r3,#0                 ;33
0000a0  461a              MOV      r2,r3                 ;33
0000a2  4669              MOV      r1,sp                 ;33
0000a4  6860              LDR      r0,[r4,#4]            ;33  ; xLimiterQueueLCD
0000a6  f7fffffe          BL       xQueueGenericSend
0000aa  2300              MOVS     r3,#0                 ;34
0000ac  461a              MOV      r2,r3                 ;34
0000ae  4669              MOV      r1,sp                 ;34
0000b0  6820              LDR      r0,[r4,#0]            ;34  ; xLimiterQueueCTRL
0000b2  f7fffffe          BL       xQueueGenericSend
                  |L1.182|
0000b6  2140              MOVS     r1,#0x40              ;37
0000b8  4628              MOV      r0,r5                 ;37
0000ba  f7fffffe          BL       GPIO_ReadInputDataBit
0000be  2800              CMP      r0,#0                 ;37
0000c0  d0f9              BEQ      |L1.182|
0000c2  200a              MOVS     r0,#0xa               ;42
0000c4  e020              B        |L1.264|
                  |L1.198|
;;;52     			{
;;;53     				vTaskDelay(10/ portTICK_PERIOD_MS);
0000c6  200a              MOVS     r0,#0xa
0000c8  f7fffffe          BL       vTaskDelay
;;;54     				if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_7))
0000cc  2180              MOVS     r1,#0x80
0000ce  4628              MOV      r0,r5
0000d0  f7fffffe          BL       GPIO_ReadInputDataBit
0000d4  b9e0              CBNZ     r0,|L1.272|
;;;55     				{
;;;56     					vTaskDelay(10/ portTICK_PERIOD_MS);
0000d6  200a              MOVS     r0,#0xa
0000d8  f7fffffe          BL       vTaskDelay
;;;57     					
;;;58     					txPosition=DOWN_LIMIT;
0000dc  2028              MOVS     r0,#0x28
0000de  f88d0000          STRB     r0,[sp,#0]
;;;59     					
;;;60     					xQueueSend( xLimiterQueueCTRL,  &txPosition, ( TickType_t ) 0 );
0000e2  2300              MOVS     r3,#0
0000e4  461a              MOV      r2,r3
0000e6  4669              MOV      r1,sp
0000e8  6820              LDR      r0,[r4,#0]  ; xLimiterQueueCTRL
0000ea  f7fffffe          BL       xQueueGenericSend
;;;61     					xQueueSend( xLimiterQueueLCD,  &txPosition, ( TickType_t ) 0 );
0000ee  2300              MOVS     r3,#0
0000f0  461a              MOV      r2,r3
0000f2  4669              MOV      r1,sp
0000f4  6860              LDR      r0,[r4,#4]  ; xLimiterQueueLCD
0000f6  f7fffffe          BL       xQueueGenericSend
                  |L1.250|
;;;62     					
;;;63     					
;;;64     					while(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_7))
0000fa  2180              MOVS     r1,#0x80
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       GPIO_ReadInputDataBit
000102  2800              CMP      r0,#0
000104  d0f9              BEQ      |L1.250|
;;;65     					{
;;;66     						continue;
;;;67     					}
;;;68     					
;;;69     					txPosition=DOWN;
000106  2014              MOVS     r0,#0x14
                  |L1.264|
000108  f88d0000          STRB     r0,[sp,#0]
;;;70     					
;;;71     					xQueueSend( xLimiterQueueCTRL,  &txPosition, ( TickType_t ) 0 );
00010c  2300              MOVS     r3,#0
00010e  e000              B        |L1.274|
                  |L1.272|
000110  e00a              B        |L1.296|
                  |L1.274|
000112  461a              MOV      r2,r3
000114  4669              MOV      r1,sp
000116  6820              LDR      r0,[r4,#0]  ; xLimiterQueueCTRL
000118  f7fffffe          BL       xQueueGenericSend
;;;72     					xQueueSend( xLimiterQueueLCD,  &txPosition, ( TickType_t ) 0 );
00011c  2300              MOVS     r3,#0
00011e  461a              MOV      r2,r3
000120  4669              MOV      r1,sp
000122  6860              LDR      r0,[r4,#4]  ; xLimiterQueueLCD
000124  f7fffffe          BL       xQueueGenericSend
                  |L1.296|
;;;73     					
;;;74     				}
;;;75     			}
;;;76     			
;;;77     
;;;78     			
;;;79     			vTaskDelay(100/ portTICK_PERIOD_MS);
000128  2064              MOVS     r0,#0x64
00012a  f7fffffe          BL       vTaskDelay
00012e  e791              B        |L1.84|
;;;80     	}//for
;;;81     	
;;;82     	vTaskDelete(NULL);
;;;83     }//task
;;;84     
                          ENDP

                  |L1.304|
                          DCD      0x40011000
                  |L1.308|
                          DCD      ||.data||
                  |L1.312|
                          DCD      xModeQueueLimit

                          AREA ||.data||, DATA, ALIGN=2

                  xLimiterQueueCTRL
                          DCD      0x00000000
                  xLimiterQueueLCD
                          DCD      0x00000000
