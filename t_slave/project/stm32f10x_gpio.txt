; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\stm32f10x_gpio.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\CMSIS\CM3\CoreSupport -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Driver\src -I..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm32f10x_gpio.crf ..\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;109    {
000004  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000006  48fe              LDR      r0,|L1.1024|
000008  4284              CMP      r4,r0
00000a  d021              BEQ      |L1.80|
00000c  4ffd              LDR      r7,|L1.1028|
00000e  4dfe              LDR      r5,|L1.1032|
000010  4efe              LDR      r6,|L1.1036|
000012  f8df83fc          LDR      r8,|L1.1040|
000016  f8df93fc          LDR      r9,|L1.1044|
00001a  f8dfa3fc          LDR      r10,|L1.1048|
00001e  42bc              CMP      r4,r7
000020  d00d              BEQ      |L1.62|
000022  42ac              CMP      r4,r5
000024  d00b              BEQ      |L1.62|
000026  42b4              CMP      r4,r6
000028  d009              BEQ      |L1.62|
00002a  4544              CMP      r4,r8
00002c  d007              BEQ      |L1.62|
00002e  454c              CMP      r4,r9
000030  d005              BEQ      |L1.62|
000032  4554              CMP      r4,r10
000034  d039              BEQ      |L1.170|
000036  216f              MOVS     r1,#0x6f
000038  a0f8              ADR      r0,|L1.1052|
00003a  f7fffffe          BL       assert_failed
                  |L1.62|
;;;112      
;;;113      if (GPIOx == GPIOA)
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;117      }
;;;118      else if (GPIOx == GPIOB)
00003e  42bc              CMP      r4,r7
000040  d10d              BNE      |L1.94|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000042  2101              MOVS     r1,#1
000044  2008              MOVS     r0,#8
000046  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
00004a  2100              MOVS     r1,#0
00004c  2008              MOVS     r0,#8
00004e  e033              B        |L1.184|
                  |L1.80|
000050  2101              MOVS     r1,#1                 ;115
000052  2004              MOVS     r0,#4                 ;115
000054  f7fffffe          BL       RCC_APB2PeriphResetCmd
000058  2100              MOVS     r1,#0                 ;116
00005a  2004              MOVS     r0,#4                 ;116
00005c  e02c              B        |L1.184|
                  |L1.94|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
00005e  42ac              CMP      r4,r5
000060  d106              BNE      |L1.112|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000062  2101              MOVS     r1,#1
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
00006a  2100              MOVS     r1,#0
00006c  2010              MOVS     r0,#0x10
00006e  e023              B        |L1.184|
                  |L1.112|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
000070  42b4              CMP      r4,r6
000072  d106              BNE      |L1.130|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000074  2101              MOVS     r1,#1
000076  2020              MOVS     r0,#0x20
000078  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00007c  2100              MOVS     r1,#0
00007e  2020              MOVS     r0,#0x20
000080  e01a              B        |L1.184|
                  |L1.130|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
000082  4544              CMP      r4,r8
000084  d106              BNE      |L1.148|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000086  2101              MOVS     r1,#1
000088  2040              MOVS     r0,#0x40
00008a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
00008e  2100              MOVS     r1,#0
000090  2040              MOVS     r0,#0x40
000092  e011              B        |L1.184|
                  |L1.148|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
000094  454c              CMP      r4,r9
000096  d106              BNE      |L1.166|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000098  2101              MOVS     r1,#1
00009a  2080              MOVS     r0,#0x80
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
0000a0  2100              MOVS     r1,#0
0000a2  2080              MOVS     r0,#0x80
0000a4  e008              B        |L1.184|
                  |L1.166|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
0000a6  4554              CMP      r4,r10
0000a8  d10a              BNE      |L1.192|
                  |L1.170|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  020c              LSLS     r4,r1,#8
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000b4  2100              MOVS     r1,#0
0000b6  4620              MOV      r0,r4
                  |L1.184|
0000b8  e8bd47f0          POP      {r4-r10,lr}
0000bc  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.192|
;;;149        }
;;;150      }
;;;151    }
0000c0  e8bd87f0          POP      {r4-r10,pc}
;;;152    
                          ENDP

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
0000c4  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
0000c6  2101              MOVS     r1,#1
0000c8  4608              MOV      r0,r1
0000ca  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000ce  2100              MOVS     r1,#0
0000d0  e8bd4010          POP      {r4,lr}
0000d4  2001              MOVS     r0,#1
0000d6  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;163    }
;;;164    
                          ENDP

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000da  e92d41f0          PUSH     {r4-r8,lr}
;;;174    {
0000de  4605              MOV      r5,r0
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0000e0  48c7              LDR      r0,|L1.1024|
0000e2  2700              MOVS     r7,#0                 ;175
0000e4  460e              MOV      r6,r1                 ;174
0000e6  4285              CMP      r5,r0
0000e8  d015              BEQ      |L1.278|
0000ea  48c6              LDR      r0,|L1.1028|
0000ec  4285              CMP      r5,r0
0000ee  d012              BEQ      |L1.278|
0000f0  48c5              LDR      r0,|L1.1032|
0000f2  4285              CMP      r5,r0
0000f4  d00f              BEQ      |L1.278|
0000f6  48c5              LDR      r0,|L1.1036|
0000f8  4285              CMP      r5,r0
0000fa  d00c              BEQ      |L1.278|
0000fc  48c4              LDR      r0,|L1.1040|
0000fe  4285              CMP      r5,r0
000100  d009              BEQ      |L1.278|
000102  48c4              LDR      r0,|L1.1044|
000104  4285              CMP      r5,r0
000106  d006              BEQ      |L1.278|
000108  48c3              LDR      r0,|L1.1048|
00010a  4285              CMP      r5,r0
00010c  d003              BEQ      |L1.278|
00010e  21b2              MOVS     r1,#0xb2
000110  a0c2              ADR      r0,|L1.1052|
000112  f7fffffe          BL       assert_failed
                  |L1.278|
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
000116  78f0              LDRB     r0,[r6,#3]
000118  b188              CBZ      r0,|L1.318|
00011a  2804              CMP      r0,#4
00011c  d00f              BEQ      |L1.318|
00011e  2828              CMP      r0,#0x28
000120  d00d              BEQ      |L1.318|
000122  2848              CMP      r0,#0x48
000124  d00b              BEQ      |L1.318|
000126  2814              CMP      r0,#0x14
000128  d009              BEQ      |L1.318|
00012a  2810              CMP      r0,#0x10
00012c  d007              BEQ      |L1.318|
00012e  281c              CMP      r0,#0x1c
000130  d005              BEQ      |L1.318|
000132  2818              CMP      r0,#0x18
000134  d003              BEQ      |L1.318|
000136  21b3              MOVS     r1,#0xb3
000138  a0b8              ADR      r0,|L1.1052|
00013a  f7fffffe          BL       assert_failed
                  |L1.318|
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
00013e  8830              LDRH     r0,[r6,#0]
000140  b918              CBNZ     r0,|L1.330|
000142  21b4              MOVS     r1,#0xb4
000144  a0b5              ADR      r0,|L1.1052|
000146  f7fffffe          BL       assert_failed
                  |L1.330|
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
00014a  78f0              LDRB     r0,[r6,#3]
00014c  f000040f          AND      r4,r0,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
000150  06c0              LSLS     r0,r0,#27
000152  d50c              BPL      |L1.366|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
000154  78b0              LDRB     r0,[r6,#2]
000156  2801              CMP      r0,#1
000158  d007              BEQ      |L1.362|
00015a  2802              CMP      r0,#2
00015c  d005              BEQ      |L1.362|
00015e  2803              CMP      r0,#3
000160  d003              BEQ      |L1.362|
000162  21bb              MOVS     r1,#0xbb
000164  a0ad              ADR      r0,|L1.1052|
000166  f7fffffe          BL       assert_failed
                  |L1.362|
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00016a  78b0              LDRB     r0,[r6,#2]
00016c  4304              ORRS     r4,r4,r0
                  |L1.366|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
00016e  7830              LDRB     r0,[r6,#0]
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;201          if (currentpin == pos)
;;;202          {
;;;203            pos = pinpos << 2;
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
000170  f04f0e0f          MOV      lr,#0xf
000174  f0100fff          TST      r0,#0xff              ;193
000178  f04f0001          MOV      r0,#1                 ;187
00017c  d01c              BEQ      |L1.440|
00017e  6829              LDR      r1,[r5,#0]            ;195
                  |L1.384|
000180  8833              LDRH     r3,[r6,#0]            ;200
000182  fa00f207          LSL      r2,r0,r7              ;198
000186  4013              ANDS     r3,r3,r2              ;200
000188  4293              CMP      r3,r2                 ;201
00018a  d111              BNE      |L1.432|
00018c  ea4f0c87          LSL      r12,r7,#2             ;201
000190  fa0ef30c          LSL      r3,lr,r12
;;;206            tmpreg &= ~pinmask;
000194  ea210303          BIC      r3,r1,r3
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
000198  fa04f10c          LSL      r1,r4,r12
00019c  4319              ORRS     r1,r1,r3
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00019e  78f3              LDRB     r3,[r6,#3]
0001a0  2b28              CMP      r3,#0x28
0001a2  d002              BEQ      |L1.426|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0001a4  2b48              CMP      r3,#0x48
0001a6  d002              BEQ      |L1.430|
0001a8  e002              B        |L1.432|
                  |L1.426|
0001aa  616a              STR      r2,[r5,#0x14]         ;212
0001ac  e000              B        |L1.432|
                  |L1.430|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
0001ae  612a              STR      r2,[r5,#0x10]
                  |L1.432|
0001b0  1c7f              ADDS     r7,r7,#1
0001b2  2f08              CMP      r7,#8                 ;196
0001b4  d3e4              BCC      |L1.384|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
0001b6  6029              STR      r1,[r5,#0]
                  |L1.440|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
0001b8  8831              LDRH     r1,[r6,#0]
0001ba  29ff              CMP      r1,#0xff
0001bc  d91e              BLS      |L1.508|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
0001be  6869              LDR      r1,[r5,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0001c0  f05f0300          MOVS.W   r3,#0
                  |L1.452|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
0001c4  f1030208          ADD      r2,r3,#8
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0001c8  8837              LDRH     r7,[r6,#0]
0001ca  fa00f202          LSL      r2,r0,r2              ;233
0001ce  4017              ANDS     r7,r7,r2
;;;236          if (currentpin == pos)
0001d0  4297              CMP      r7,r2
0001d2  d10f              BNE      |L1.500|
0001d4  ea4f0c83          LSL      r12,r3,#2
;;;237          {
;;;238            pos = pinpos << 2;
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
0001d8  fa0ef70c          LSL      r7,lr,r12
;;;241            tmpreg &= ~pinmask;
0001dc  43b9              BICS     r1,r1,r7
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
0001de  fa04f70c          LSL      r7,r4,r12
0001e2  4339              ORRS     r1,r1,r7
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0001e4  78f7              LDRB     r7,[r6,#3]
0001e6  2f28              CMP      r7,#0x28
0001e8  d100              BNE      |L1.492|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
0001ea  616a              STR      r2,[r5,#0x14]
                  |L1.492|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0001ec  78f7              LDRB     r7,[r6,#3]
0001ee  2f48              CMP      r7,#0x48
0001f0  d100              BNE      |L1.500|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
0001f2  612a              STR      r2,[r5,#0x10]
                  |L1.500|
0001f4  1c5b              ADDS     r3,r3,#1
0001f6  2b08              CMP      r3,#8                 ;231
0001f8  d3e4              BCC      |L1.452|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
0001fa  6069              STR      r1,[r5,#4]
                  |L1.508|
;;;257      }
;;;258    }
0001fc  e8bd81f0          POP      {r4-r8,pc}
;;;259    
                          ENDP

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000200  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000204  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000206  2102              MOVS     r1,#2
000208  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00020a  2104              MOVS     r1,#4
00020c  70c1              STRB     r1,[r0,#3]
;;;272    }
00020e  4770              BX       lr
;;;273    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000210  b570              PUSH     {r4-r6,lr}
;;;282    {
000212  4605              MOV      r5,r0
;;;283      uint8_t bitstatus = 0x00;
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000214  487a              LDR      r0,|L1.1024|
000216  2600              MOVS     r6,#0                 ;283
000218  460c              MOV      r4,r1                 ;282
00021a  4285              CMP      r5,r0
00021c  d016              BEQ      |L1.588|
00021e  4879              LDR      r0,|L1.1028|
000220  4285              CMP      r5,r0
000222  d013              BEQ      |L1.588|
000224  4878              LDR      r0,|L1.1032|
000226  4285              CMP      r5,r0
000228  d010              BEQ      |L1.588|
00022a  4878              LDR      r0,|L1.1036|
00022c  4285              CMP      r5,r0
00022e  d00d              BEQ      |L1.588|
000230  4877              LDR      r0,|L1.1040|
000232  4285              CMP      r5,r0
000234  d00a              BEQ      |L1.588|
000236  4877              LDR      r0,|L1.1044|
000238  4285              CMP      r5,r0
00023a  d007              BEQ      |L1.588|
00023c  4876              LDR      r0,|L1.1048|
00023e  4285              CMP      r5,r0
000240  d004              BEQ      |L1.588|
000242  f44f718f          MOV      r1,#0x11e
000246  a075              ADR      r0,|L1.1052|
000248  f7fffffe          BL       assert_failed
                  |L1.588|
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
00024c  2c01              CMP      r4,#1
00024e  d02a              BEQ      |L1.678|
000250  2c02              CMP      r4,#2
000252  d028              BEQ      |L1.678|
000254  2c04              CMP      r4,#4
000256  d026              BEQ      |L1.678|
000258  2c08              CMP      r4,#8
00025a  d024              BEQ      |L1.678|
00025c  2c10              CMP      r4,#0x10
00025e  d022              BEQ      |L1.678|
000260  2c20              CMP      r4,#0x20
000262  d020              BEQ      |L1.678|
000264  2c40              CMP      r4,#0x40
000266  d01e              BEQ      |L1.678|
000268  2c80              CMP      r4,#0x80
00026a  d01c              BEQ      |L1.678|
00026c  f5b47f80          CMP      r4,#0x100
000270  d019              BEQ      |L1.678|
000272  f5b47f00          CMP      r4,#0x200
000276  d016              BEQ      |L1.678|
000278  f5b46f80          CMP      r4,#0x400
00027c  d013              BEQ      |L1.678|
00027e  f5b46f00          CMP      r4,#0x800
000282  d010              BEQ      |L1.678|
000284  f5b45f80          CMP      r4,#0x1000
000288  d00d              BEQ      |L1.678|
00028a  f5b45f00          CMP      r4,#0x2000
00028e  d00a              BEQ      |L1.678|
000290  f5b44f80          CMP      r4,#0x4000
000294  d007              BEQ      |L1.678|
000296  f5b44f00          CMP      r4,#0x8000
00029a  d004              BEQ      |L1.678|
00029c  f240111f          MOV      r1,#0x11f
0002a0  a05e              ADR      r0,|L1.1052|
0002a2  f7fffffe          BL       assert_failed
                  |L1.678|
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
0002a6  68a8              LDR      r0,[r5,#8]
0002a8  4220              TST      r0,r4
0002aa  d000              BEQ      |L1.686|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
0002ac  2601              MOVS     r6,#1
                  |L1.686|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
;;;296      }
;;;297      return bitstatus;
0002ae  4630              MOV      r0,r6
;;;298    }
0002b0  bd70              POP      {r4-r6,pc}
;;;299    
                          ENDP

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0002b2  b510              PUSH     {r4,lr}
;;;306    {
0002b4  4604              MOV      r4,r0
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0002b6  4852              LDR      r0,|L1.1024|
0002b8  4284              CMP      r4,r0
0002ba  d016              BEQ      |L1.746|
0002bc  4851              LDR      r0,|L1.1028|
0002be  4284              CMP      r4,r0
0002c0  d013              BEQ      |L1.746|
0002c2  4851              LDR      r0,|L1.1032|
0002c4  4284              CMP      r4,r0
0002c6  d010              BEQ      |L1.746|
0002c8  4850              LDR      r0,|L1.1036|
0002ca  4284              CMP      r4,r0
0002cc  d00d              BEQ      |L1.746|
0002ce  4850              LDR      r0,|L1.1040|
0002d0  4284              CMP      r4,r0
0002d2  d00a              BEQ      |L1.746|
0002d4  484f              LDR      r0,|L1.1044|
0002d6  4284              CMP      r4,r0
0002d8  d007              BEQ      |L1.746|
0002da  484f              LDR      r0,|L1.1048|
0002dc  4284              CMP      r4,r0
0002de  d004              BEQ      |L1.746|
0002e0  f44f719a          MOV      r1,#0x134
0002e4  a04d              ADR      r0,|L1.1052|
0002e6  f7fffffe          BL       assert_failed
                  |L1.746|
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
0002ea  68a0              LDR      r0,[r4,#8]
0002ec  b280              UXTH     r0,r0
;;;311    }
0002ee  bd10              POP      {r4,pc}
;;;312    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0002f0  b570              PUSH     {r4-r6,lr}
;;;321    {
0002f2  4605              MOV      r5,r0
;;;322      uint8_t bitstatus = 0x00;
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0002f4  4842              LDR      r0,|L1.1024|
0002f6  2600              MOVS     r6,#0                 ;322
0002f8  460c              MOV      r4,r1                 ;321
0002fa  4285              CMP      r5,r0
0002fc  d016              BEQ      |L1.812|
0002fe  4841              LDR      r0,|L1.1028|
000300  4285              CMP      r5,r0
000302  d013              BEQ      |L1.812|
000304  4840              LDR      r0,|L1.1032|
000306  4285              CMP      r5,r0
000308  d010              BEQ      |L1.812|
00030a  4840              LDR      r0,|L1.1036|
00030c  4285              CMP      r5,r0
00030e  d00d              BEQ      |L1.812|
000310  483f              LDR      r0,|L1.1040|
000312  4285              CMP      r5,r0
000314  d00a              BEQ      |L1.812|
000316  483f              LDR      r0,|L1.1044|
000318  4285              CMP      r5,r0
00031a  d007              BEQ      |L1.812|
00031c  483e              LDR      r0,|L1.1048|
00031e  4285              CMP      r5,r0
000320  d004              BEQ      |L1.812|
000322  f44f71a2          MOV      r1,#0x144
000326  a03d              ADR      r0,|L1.1052|
000328  f7fffffe          BL       assert_failed
                  |L1.812|
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
00032c  2c01              CMP      r4,#1
00032e  d02a              BEQ      |L1.902|
000330  2c02              CMP      r4,#2
000332  d028              BEQ      |L1.902|
000334  2c04              CMP      r4,#4
000336  d026              BEQ      |L1.902|
000338  2c08              CMP      r4,#8
00033a  d024              BEQ      |L1.902|
00033c  2c10              CMP      r4,#0x10
00033e  d022              BEQ      |L1.902|
000340  2c20              CMP      r4,#0x20
000342  d020              BEQ      |L1.902|
000344  2c40              CMP      r4,#0x40
000346  d01e              BEQ      |L1.902|
000348  2c80              CMP      r4,#0x80
00034a  d01c              BEQ      |L1.902|
00034c  f5b47f80          CMP      r4,#0x100
000350  d019              BEQ      |L1.902|
000352  f5b47f00          CMP      r4,#0x200
000356  d016              BEQ      |L1.902|
000358  f5b46f80          CMP      r4,#0x400
00035c  d013              BEQ      |L1.902|
00035e  f5b46f00          CMP      r4,#0x800
000362  d010              BEQ      |L1.902|
000364  f5b45f80          CMP      r4,#0x1000
000368  d00d              BEQ      |L1.902|
00036a  f5b45f00          CMP      r4,#0x2000
00036e  d00a              BEQ      |L1.902|
000370  f5b44f80          CMP      r4,#0x4000
000374  d007              BEQ      |L1.902|
000376  f5b44f00          CMP      r4,#0x8000
00037a  d004              BEQ      |L1.902|
00037c  f2401145          MOV      r1,#0x145
000380  a026              ADR      r0,|L1.1052|
000382  f7fffffe          BL       assert_failed
                  |L1.902|
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000386  68e8              LDR      r0,[r5,#0xc]
000388  4220              TST      r0,r4
00038a  d000              BEQ      |L1.910|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
00038c  2601              MOVS     r6,#1
                  |L1.910|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
;;;334      }
;;;335      return bitstatus;
00038e  4630              MOV      r0,r6
;;;336    }
000390  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000392  b510              PUSH     {r4,lr}
;;;344    {
000394  4604              MOV      r4,r0
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000396  481a              LDR      r0,|L1.1024|
000398  4284              CMP      r4,r0
00039a  d016              BEQ      |L1.970|
00039c  4819              LDR      r0,|L1.1028|
00039e  4284              CMP      r4,r0
0003a0  d013              BEQ      |L1.970|
0003a2  4819              LDR      r0,|L1.1032|
0003a4  4284              CMP      r4,r0
0003a6  d010              BEQ      |L1.970|
0003a8  4818              LDR      r0,|L1.1036|
0003aa  4284              CMP      r4,r0
0003ac  d00d              BEQ      |L1.970|
0003ae  4818              LDR      r0,|L1.1040|
0003b0  4284              CMP      r4,r0
0003b2  d00a              BEQ      |L1.970|
0003b4  4817              LDR      r0,|L1.1044|
0003b6  4284              CMP      r4,r0
0003b8  d007              BEQ      |L1.970|
0003ba  4817              LDR      r0,|L1.1048|
0003bc  4284              CMP      r4,r0
0003be  d004              BEQ      |L1.970|
0003c0  f44f71ad          MOV      r1,#0x15a
0003c4  a015              ADR      r0,|L1.1052|
0003c6  f7fffffe          BL       assert_failed
                  |L1.970|
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
0003ca  68e0              LDR      r0,[r4,#0xc]
0003cc  b280              UXTH     r0,r0
;;;349    }
0003ce  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0003d0  b570              PUSH     {r4-r6,lr}
;;;359    {
0003d2  4604              MOV      r4,r0
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0003d4  480a              LDR      r0,|L1.1024|
0003d6  460d              MOV      r5,r1                 ;359
0003d8  4284              CMP      r4,r0
0003da  d040              BEQ      |L1.1118|
0003dc  4809              LDR      r0,|L1.1028|
0003de  4284              CMP      r4,r0
0003e0  d03d              BEQ      |L1.1118|
0003e2  4809              LDR      r0,|L1.1032|
0003e4  4284              CMP      r4,r0
0003e6  d03a              BEQ      |L1.1118|
0003e8  4808              LDR      r0,|L1.1036|
0003ea  4284              CMP      r4,r0
0003ec  d037              BEQ      |L1.1118|
0003ee  4808              LDR      r0,|L1.1040|
0003f0  4284              CMP      r4,r0
0003f2  d034              BEQ      |L1.1118|
0003f4  4807              LDR      r0,|L1.1044|
0003f6  4284              CMP      r4,r0
0003f8  d031              BEQ      |L1.1118|
0003fa  4807              LDR      r0,|L1.1048|
0003fc  4284              CMP      r4,r0
0003fe  e027              B        |L1.1104|
                  |L1.1024|
                          DCD      0x40010800
                  |L1.1028|
                          DCD      0x40010c00
                  |L1.1032|
                          DCD      0x40011000
                  |L1.1036|
                          DCD      0x40011400
                  |L1.1040|
                          DCD      0x40011800
                  |L1.1044|
                          DCD      0x40011c00
                  |L1.1048|
                          DCD      0x40012000
                  |L1.1052|
00041c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_gpio.c",0
000420  544d3332
000424  46313078
000428  5f537464
00042c  50657269
000430  70685f44
000434  72697665
000438  725c7372
00043c  635c7374
000440  6d333266
000444  3130785f
000448  6770696f
00044c  2e6300  
00044f  00                DCB      0
                  |L1.1104|
000450  d005              BEQ      |L1.1118|
000452  f2401169          MOV      r1,#0x169
000456  f2af003c          ADR      r0,|L1.1052|
00045a  f7fffffe          BL       assert_failed
                  |L1.1118|
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
00045e  b92d              CBNZ     r5,|L1.1132|
000460  f44f71b5          MOV      r1,#0x16a
000464  f2af004c          ADR      r0,|L1.1052|
000468  f7fffffe          BL       assert_failed
                  |L1.1132|
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
00046c  6125              STR      r5,[r4,#0x10]
;;;365    }
00046e  bd70              POP      {r4-r6,pc}
;;;366    
                          ENDP

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000470  b570              PUSH     {r4-r6,lr}
;;;375    {
000472  4604              MOV      r4,r0
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000474  48fe              LDR      r0,|L1.2160|
000476  460d              MOV      r5,r1                 ;375
000478  4284              CMP      r4,r0
00047a  d017              BEQ      |L1.1196|
00047c  48fd              LDR      r0,|L1.2164|
00047e  4284              CMP      r4,r0
000480  d014              BEQ      |L1.1196|
000482  48fd              LDR      r0,|L1.2168|
000484  4284              CMP      r4,r0
000486  d011              BEQ      |L1.1196|
000488  48fc              LDR      r0,|L1.2172|
00048a  4284              CMP      r4,r0
00048c  d00e              BEQ      |L1.1196|
00048e  48fc              LDR      r0,|L1.2176|
000490  4284              CMP      r4,r0
000492  d00b              BEQ      |L1.1196|
000494  48fb              LDR      r0,|L1.2180|
000496  4284              CMP      r4,r0
000498  d008              BEQ      |L1.1196|
00049a  48fb              LDR      r0,|L1.2184|
00049c  4284              CMP      r4,r0
00049e  d005              BEQ      |L1.1196|
0004a0  f2401179          MOV      r1,#0x179
0004a4  f2af008c          ADR      r0,|L1.1052|
0004a8  f7fffffe          BL       assert_failed
                  |L1.1196|
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
0004ac  b92d              CBNZ     r5,|L1.1210|
0004ae  f44f71bd          MOV      r1,#0x17a
0004b2  f2af0098          ADR      r0,|L1.1052|
0004b6  f7fffffe          BL       assert_failed
                  |L1.1210|
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
0004ba  6165              STR      r5,[r4,#0x14]
;;;381    }
0004bc  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
0004be  b570              PUSH     {r4-r6,lr}
;;;395    {
0004c0  4605              MOV      r5,r0
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0004c2  48eb              LDR      r0,|L1.2160|
0004c4  4616              MOV      r6,r2                 ;395
0004c6  460c              MOV      r4,r1                 ;395
0004c8  4285              CMP      r5,r0
0004ca  d017              BEQ      |L1.1276|
0004cc  48e9              LDR      r0,|L1.2164|
0004ce  4285              CMP      r5,r0
0004d0  d014              BEQ      |L1.1276|
0004d2  48e9              LDR      r0,|L1.2168|
0004d4  4285              CMP      r5,r0
0004d6  d011              BEQ      |L1.1276|
0004d8  48e8              LDR      r0,|L1.2172|
0004da  4285              CMP      r5,r0
0004dc  d00e              BEQ      |L1.1276|
0004de  48e8              LDR      r0,|L1.2176|
0004e0  4285              CMP      r5,r0
0004e2  d00b              BEQ      |L1.1276|
0004e4  48e7              LDR      r0,|L1.2180|
0004e6  4285              CMP      r5,r0
0004e8  d008              BEQ      |L1.1276|
0004ea  48e7              LDR      r0,|L1.2184|
0004ec  4285              CMP      r5,r0
0004ee  d005              BEQ      |L1.1276|
0004f0  f240118d          MOV      r1,#0x18d
0004f4  f2af00dc          ADR      r0,|L1.1052|
0004f8  f7fffffe          BL       assert_failed
                  |L1.1276|
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
0004fc  2c01              CMP      r4,#1
0004fe  d02b              BEQ      |L1.1368|
000500  2c02              CMP      r4,#2
000502  d029              BEQ      |L1.1368|
000504  2c04              CMP      r4,#4
000506  d027              BEQ      |L1.1368|
000508  2c08              CMP      r4,#8
00050a  d025              BEQ      |L1.1368|
00050c  2c10              CMP      r4,#0x10
00050e  d023              BEQ      |L1.1368|
000510  2c20              CMP      r4,#0x20
000512  d021              BEQ      |L1.1368|
000514  2c40              CMP      r4,#0x40
000516  d01f              BEQ      |L1.1368|
000518  2c80              CMP      r4,#0x80
00051a  d01d              BEQ      |L1.1368|
00051c  f5b47f80          CMP      r4,#0x100
000520  d01a              BEQ      |L1.1368|
000522  f5b47f00          CMP      r4,#0x200
000526  d017              BEQ      |L1.1368|
000528  f5b46f80          CMP      r4,#0x400
00052c  d014              BEQ      |L1.1368|
00052e  f5b46f00          CMP      r4,#0x800
000532  d011              BEQ      |L1.1368|
000534  f5b45f80          CMP      r4,#0x1000
000538  d00e              BEQ      |L1.1368|
00053a  f5b45f00          CMP      r4,#0x2000
00053e  d00b              BEQ      |L1.1368|
000540  f5b44f80          CMP      r4,#0x4000
000544  d008              BEQ      |L1.1368|
000546  f5b44f00          CMP      r4,#0x8000
00054a  d005              BEQ      |L1.1368|
00054c  f44f71c7          MOV      r1,#0x18e
000550  f2af1038          ADR      r0,|L1.1052|
000554  f7fffffe          BL       assert_failed
                  |L1.1368|
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
000558  b14e              CBZ      r6,|L1.1390|
00055a  2e01              CMP      r6,#1
00055c  d005              BEQ      |L1.1386|
00055e  f240118f          MOV      r1,#0x18f
000562  f2af1048          ADR      r0,|L1.1052|
000566  f7fffffe          BL       assert_failed
                  |L1.1386|
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
00056a  612c              STR      r4,[r5,#0x10]
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
;;;408      }
;;;409    }
00056c  bd70              POP      {r4-r6,pc}
                  |L1.1390|
00056e  616c              STR      r4,[r5,#0x14]         ;407
000570  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000572  b570              PUSH     {r4-r6,lr}
;;;418    {
000574  4604              MOV      r4,r0
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
000576  48be              LDR      r0,|L1.2160|
000578  460d              MOV      r5,r1                 ;418
00057a  4284              CMP      r4,r0
00057c  d017              BEQ      |L1.1454|
00057e  48bd              LDR      r0,|L1.2164|
000580  4284              CMP      r4,r0
000582  d014              BEQ      |L1.1454|
000584  48bc              LDR      r0,|L1.2168|
000586  4284              CMP      r4,r0
000588  d011              BEQ      |L1.1454|
00058a  48bc              LDR      r0,|L1.2172|
00058c  4284              CMP      r4,r0
00058e  d00e              BEQ      |L1.1454|
000590  48bb              LDR      r0,|L1.2176|
000592  4284              CMP      r4,r0
000594  d00b              BEQ      |L1.1454|
000596  48bb              LDR      r0,|L1.2180|
000598  4284              CMP      r4,r0
00059a  d008              BEQ      |L1.1454|
00059c  48ba              LDR      r0,|L1.2184|
00059e  4284              CMP      r4,r0
0005a0  d005              BEQ      |L1.1454|
0005a2  f44f71d2          MOV      r1,#0x1a4
0005a6  f2af108c          ADR      r0,|L1.1052|
0005aa  f7fffffe          BL       assert_failed
                  |L1.1454|
;;;421      
;;;422      GPIOx->ODR = PortVal;
0005ae  60e5              STR      r5,[r4,#0xc]
;;;423    }
0005b0  bd70              POP      {r4-r6,pc}
;;;424    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0005b2  b570              PUSH     {r4-r6,lr}
;;;433    {
0005b4  4604              MOV      r4,r0
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
0005b6  48ae              LDR      r0,|L1.2160|
0005b8  460d              MOV      r5,r1                 ;433
0005ba  4284              CMP      r4,r0
0005bc  d017              BEQ      |L1.1518|
0005be  48ad              LDR      r0,|L1.2164|
0005c0  4284              CMP      r4,r0
0005c2  d014              BEQ      |L1.1518|
0005c4  48ac              LDR      r0,|L1.2168|
0005c6  4284              CMP      r4,r0
0005c8  d011              BEQ      |L1.1518|
0005ca  48ac              LDR      r0,|L1.2172|
0005cc  4284              CMP      r4,r0
0005ce  d00e              BEQ      |L1.1518|
0005d0  48ab              LDR      r0,|L1.2176|
0005d2  4284              CMP      r4,r0
0005d4  d00b              BEQ      |L1.1518|
0005d6  48ab              LDR      r0,|L1.2180|
0005d8  4284              CMP      r4,r0
0005da  d008              BEQ      |L1.1518|
0005dc  48aa              LDR      r0,|L1.2184|
0005de  4284              CMP      r4,r0
0005e0  d005              BEQ      |L1.1518|
0005e2  f24011b5          MOV      r1,#0x1b5
0005e6  f2af10cc          ADR      r0,|L1.1052|
0005ea  f7fffffe          BL       assert_failed
                  |L1.1518|
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
0005ee  b92d              CBNZ     r5,|L1.1532|
0005f0  f44f71db          MOV      r1,#0x1b6
0005f4  f2af10dc          ADR      r0,|L1.1052|
0005f8  f7fffffe          BL       assert_failed
                  |L1.1532|
;;;439      
;;;440      tmp |= GPIO_Pin;
0005fc  f4453080          ORR      r0,r5,#0x10000
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
000600  61a0              STR      r0,[r4,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
000602  61a5              STR      r5,[r4,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
000604  61a0              STR      r0,[r4,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
000606  69a0              LDR      r0,[r4,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
000608  69a0              LDR      r0,[r4,#0x18]
;;;451    }
00060a  bd70              POP      {r4-r6,pc}
;;;452    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
00060c  b570              PUSH     {r4-r6,lr}
;;;463    {
00060e  460c              MOV      r4,r1
000610  0005              MOVS     r5,r0
000612  d00d              BEQ      |L1.1584|
;;;464      uint32_t tmpreg = 0x00;
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
000614  2d01              CMP      r5,#1
000616  d00b              BEQ      |L1.1584|
000618  2d02              CMP      r5,#2
00061a  d009              BEQ      |L1.1584|
00061c  2d03              CMP      r5,#3
00061e  d007              BEQ      |L1.1584|
000620  2d04              CMP      r5,#4
000622  d005              BEQ      |L1.1584|
000624  f44f71e9          MOV      r1,#0x1d2
000628  f2af2010          ADR      r0,|L1.1052|
00062c  f7fffffe          BL       assert_failed
                  |L1.1584|
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
000630  b31c              CBZ      r4,|L1.1658|
000632  2c01              CMP      r4,#1
000634  d021              BEQ      |L1.1658|
000636  2c02              CMP      r4,#2
000638  d01f              BEQ      |L1.1658|
00063a  2c03              CMP      r4,#3
00063c  d01d              BEQ      |L1.1658|
00063e  2c04              CMP      r4,#4
000640  d01b              BEQ      |L1.1658|
000642  2c05              CMP      r4,#5
000644  d019              BEQ      |L1.1658|
000646  2c06              CMP      r4,#6
000648  d017              BEQ      |L1.1658|
00064a  2c07              CMP      r4,#7
00064c  d015              BEQ      |L1.1658|
00064e  2c08              CMP      r4,#8
000650  d013              BEQ      |L1.1658|
000652  2c09              CMP      r4,#9
000654  d011              BEQ      |L1.1658|
000656  2c0a              CMP      r4,#0xa
000658  d00f              BEQ      |L1.1658|
00065a  2c0b              CMP      r4,#0xb
00065c  d00d              BEQ      |L1.1658|
00065e  2c0c              CMP      r4,#0xc
000660  d00b              BEQ      |L1.1658|
000662  2c0d              CMP      r4,#0xd
000664  d009              BEQ      |L1.1658|
000666  2c0e              CMP      r4,#0xe
000668  d007              BEQ      |L1.1658|
00066a  2c0f              CMP      r4,#0xf
00066c  d005              BEQ      |L1.1658|
00066e  f24011d3          MOV      r1,#0x1d3
000672  f2af2058          ADR      r0,|L1.1052|
000676  f7fffffe          BL       assert_failed
                  |L1.1658|
;;;468        
;;;469      tmpreg = AFIO->EVCR;
00067a  4984              LDR      r1,|L1.2188|
00067c  6808              LDR      r0,[r1,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
00067e  f64f7280          MOV      r2,#0xff80
000682  4010              ANDS     r0,r0,r2
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
000684  ea401005          ORR      r0,r0,r5,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
000688  4320              ORRS     r0,r0,r4
;;;474      AFIO->EVCR = tmpreg;
00068a  6008              STR      r0,[r1,#0]
;;;475    }
00068c  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
00068e  b510              PUSH     {r4,lr}
;;;484    {
000690  0004              MOVS     r4,r0
000692  d007              BEQ      |L1.1700|
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
000694  2c01              CMP      r4,#1
000696  d005              BEQ      |L1.1700|
000698  f44f71f3          MOV      r1,#0x1e6
00069c  f2af2084          ADR      r0,|L1.1052|
0006a0  f7fffffe          BL       assert_failed
                  |L1.1700|
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
0006a4  487a              LDR      r0,|L1.2192|
0006a6  61c4              STR      r4,[r0,#0x1c]
;;;489    }
0006a8  bd10              POP      {r4,pc}
;;;490    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
0006aa  e92d41f0          PUSH     {r4-r8,lr}
;;;550    {
0006ae  460d              MOV      r5,r1
0006b0  4604              MOV      r4,r0
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
0006b2  2801              CMP      r0,#1
0006b4  d07e              BEQ      |L1.1972|
0006b6  2c02              CMP      r4,#2
0006b8  d07c              BEQ      |L1.1972|
0006ba  2c04              CMP      r4,#4
0006bc  d07a              BEQ      |L1.1972|
0006be  2c08              CMP      r4,#8
0006c0  d078              BEQ      |L1.1972|
0006c2  f5a410a0          SUB      r0,r4,#0x140000
0006c6  3810              SUBS     r0,r0,#0x10
0006c8  d07e              BEQ      |L1.1992|
0006ca  3820              SUBS     r0,r0,#0x20
0006cc  d07c              BEQ      |L1.1992|
0006ce  f5a410b0          SUB      r0,r4,#0x160000
0006d2  3840              SUBS     r0,r0,#0x40
0006d4  d078              BEQ      |L1.1992|
0006d6  3880              SUBS     r0,r0,#0x80
0006d8  d076              BEQ      |L1.1992|
0006da  486e              LDR      r0,|L1.2196|
0006dc  4284              CMP      r4,r0
0006de  d073              BEQ      |L1.1992|
0006e0  486d              LDR      r0,|L1.2200|
0006e2  4284              CMP      r4,r0
0006e4  d070              BEQ      |L1.1992|
0006e6  486d              LDR      r0,|L1.2204|
0006e8  4284              CMP      r4,r0
0006ea  d06d              BEQ      |L1.1992|
0006ec  486c              LDR      r0,|L1.2208|
0006ee  4284              CMP      r4,r0
0006f0  d06a              BEQ      |L1.1992|
0006f2  486c              LDR      r0,|L1.2212|
0006f4  4284              CMP      r4,r0
0006f6  d067              BEQ      |L1.1992|
0006f8  f5b45f80          CMP      r4,#0x1000
0006fc  d064              BEQ      |L1.1992|
0006fe  f5b41fea          CMP      r4,#0x1d4000
000702  d061              BEQ      |L1.1992|
000704  f5b41feb          CMP      r4,#0x1d6000
000708  d05e              BEQ      |L1.1992|
00070a  f5b44f00          CMP      r4,#0x8000
00070e  d05b              BEQ      |L1.1992|
000710  f46f1000          MVN      r0,#0x200000
000714  42c4              CMN      r4,r0
000716  d057              BEQ      |L1.1992|
000718  f5a41000          SUB      r0,r4,#0x200000
00071c  1e80              SUBS     r0,r0,#2
00071e  d053              BEQ      |L1.1992|
000720  1e80              SUBS     r0,r0,#2
000722  d051              BEQ      |L1.1992|
000724  1f00              SUBS     r0,r0,#4
000726  d04f              BEQ      |L1.1992|
000728  3808              SUBS     r0,r0,#8
00072a  d04d              BEQ      |L1.1992|
00072c  f1b41f20          CMP      r4,#0x200020
000730  d04a              BEQ      |L1.1992|
000732  3830              SUBS     r0,r0,#0x30
000734  d048              BEQ      |L1.1992|
000736  485c              LDR      r0,|L1.2216|
000738  4284              CMP      r4,r0
00073a  d045              BEQ      |L1.1992|
00073c  485b              LDR      r0,|L1.2220|
00073e  4284              CMP      r4,r0
000740  d042              BEQ      |L1.1992|
000742  485b              LDR      r0,|L1.2224|
000744  4284              CMP      r4,r0
000746  d03f              BEQ      |L1.1992|
000748  485a              LDR      r0,|L1.2228|
00074a  4284              CMP      r4,r0
00074c  d03c              BEQ      |L1.1992|
00074e  485a              LDR      r0,|L1.2232|
000750  4284              CMP      r4,r0
000752  d039              BEQ      |L1.1992|
000754  f5b41f01          CMP      r4,#0x204000
000758  d036              BEQ      |L1.1992|
00075a  f06f4000          MVN      r0,#0x80000000
00075e  42c4              CMN      r4,r0
000760  d032              BEQ      |L1.1992|
000762  1cc0              ADDS     r0,r0,#3
000764  4284              CMP      r4,r0
000766  d02f              BEQ      |L1.1992|
000768  1c80              ADDS     r0,r0,#2
00076a  4284              CMP      r4,r0
00076c  d02c              BEQ      |L1.1992|
00076e  1d00              ADDS     r0,r0,#4
000770  4284              CMP      r4,r0
000772  d029              BEQ      |L1.1992|
000774  4851              LDR      r0,|L1.2236|
000776  4284              CMP      r4,r0
000778  d026              BEQ      |L1.1992|
00077a  4850              LDR      r0,|L1.2236|
00077c  3010              ADDS     r0,r0,#0x10
00077e  4284              CMP      r4,r0
000780  d022              BEQ      |L1.1992|
000782  484e              LDR      r0,|L1.2236|
000784  3030              ADDS     r0,r0,#0x30
000786  4284              CMP      r4,r0
000788  d01e              BEQ      |L1.1992|
00078a  484c              LDR      r0,|L1.2236|
00078c  3070              ADDS     r0,r0,#0x70
00078e  4284              CMP      r4,r0
000790  d01a              BEQ      |L1.1992|
000792  484a              LDR      r0,|L1.2236|
000794  30f0              ADDS     r0,r0,#0xf0
000796  4284              CMP      r4,r0
000798  d016              BEQ      |L1.1992|
00079a  4849              LDR      r0,|L1.2240|
00079c  4284              CMP      r4,r0
00079e  d013              BEQ      |L1.1992|
0007a0  4848              LDR      r0,|L1.2244|
0007a2  4284              CMP      r4,r0
0007a4  d010              BEQ      |L1.1992|
0007a6  4848              LDR      r0,|L1.2248|
0007a8  4284              CMP      r4,r0
0007aa  d00d              BEQ      |L1.1992|
0007ac  4847              LDR      r0,|L1.2252|
0007ae  4284              CMP      r4,r0
0007b0  d00a              BEQ      |L1.1992|
0007b2  e000              B        |L1.1974|
                  |L1.1972|
0007b4  e008              B        |L1.1992|
                  |L1.1974|
0007b6  4846              LDR      r0,|L1.2256|
0007b8  4284              CMP      r4,r0
0007ba  d005              BEQ      |L1.1992|
0007bc  f240212a          MOV      r1,#0x22a
0007c0  f2af30a8          ADR      r0,|L1.1052|
0007c4  f7fffffe          BL       assert_failed
                  |L1.1992|
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
0007c8  b13d              CBZ      r5,|L1.2010|
0007ca  2d01              CMP      r5,#1
0007cc  d005              BEQ      |L1.2010|
0007ce  f240212b          MOV      r1,#0x22b
0007d2  f2af30b8          ADR      r0,|L1.1052|
0007d6  f7fffffe          BL       assert_failed
                  |L1.2010|
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
0007da  492c              LDR      r1,|L1.2188|
0007dc  2c00              CMP      r4,#0                 ;557
0007de  da01              BGE      |L1.2020|
0007e0  69ca              LDR      r2,[r1,#0x1c]
0007e2  e000              B        |L1.2022|
                  |L1.2020|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
0007e4  684a              LDR      r2,[r1,#4]
                  |L1.2022|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;567      tmp = GPIO_Remap & LSB_MASK;
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;577        tmpreg &= ~tmp1;
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
0007e6  0d60              LSRS     r0,r4,#21
0007e8  0100              LSLS     r0,r0,#4
0007ea  b2a3              UXTH     r3,r4                 ;567
0007ec  f3c45701          UBFX     r7,r4,#20,#2          ;569
0007f0  4083              LSLS     r3,r3,r0
0007f2  f3c44603          UBFX     r6,r4,#16,#4          ;566
0007f6  2f03              CMP      r7,#3                 ;569
0007f8  d005              BEQ      |L1.2054|
0007fa  02e0              LSLS     r0,r4,#11             ;574
0007fc  d50a              BPL      |L1.2068|
0007fe  2003              MOVS     r0,#3                 ;576
000800  40b0              LSLS     r0,r0,r6              ;576
000802  4382              BICS     r2,r2,r0              ;577
000804  e007              B        |L1.2070|
                  |L1.2054|
000806  f0226070          BIC      r0,r2,#0xf000000      ;571
00080a  684a              LDR      r2,[r1,#4]            ;572
00080c  f0226270          BIC      r2,r2,#0xf000000      ;572
000810  604a              STR      r2,[r1,#4]            ;572
000812  e002              B        |L1.2074|
                  |L1.2068|
000814  439a              BICS     r2,r2,r3
                  |L1.2070|
000816  f0426070          ORR      r0,r2,#0xf000000      ;578
                  |L1.2074|
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
00081a  b105              CBZ      r5,|L1.2078|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00081c  4318              ORRS     r0,r0,r3
                  |L1.2078|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
00081e  2c00              CMP      r4,#0
000820  da01              BGE      |L1.2086|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
000822  61c8              STR      r0,[r1,#0x1c]
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
;;;598      }  
;;;599    }
000824  e4ea              B        |L1.508|
                  |L1.2086|
000826  6048              STR      r0,[r1,#4]            ;597
000828  e4e8              B        |L1.508|
;;;600    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
00082a  b570              PUSH     {r4-r6,lr}
;;;610    {
00082c  460c              MOV      r4,r1
00082e  0005              MOVS     r5,r0
000830  d011              BEQ      |L1.2134|
;;;611      uint32_t tmp = 0x00;
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
000832  2d01              CMP      r5,#1
000834  d00f              BEQ      |L1.2134|
000836  2d02              CMP      r5,#2
000838  d00d              BEQ      |L1.2134|
00083a  2d03              CMP      r5,#3
00083c  d00b              BEQ      |L1.2134|
00083e  2d04              CMP      r5,#4
000840  d009              BEQ      |L1.2134|
000842  2d05              CMP      r5,#5
000844  d007              BEQ      |L1.2134|
000846  2d06              CMP      r5,#6
000848  d005              BEQ      |L1.2134|
00084a  f2402165          MOV      r1,#0x265
00084e  f2af4034          ADR      r0,|L1.1052|
000852  f7fffffe          BL       assert_failed
                  |L1.2134|
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
000856  b3ec              CBZ      r4,|L1.2260|
000858  2c01              CMP      r4,#1
00085a  d055              BEQ      |L1.2312|
00085c  2c02              CMP      r4,#2
00085e  d053              BEQ      |L1.2312|
000860  2c03              CMP      r4,#3
000862  d051              BEQ      |L1.2312|
000864  2c04              CMP      r4,#4
000866  d04f              BEQ      |L1.2312|
000868  2c05              CMP      r4,#5
00086a  d04d              BEQ      |L1.2312|
00086c  2c06              CMP      r4,#6
00086e  e032              B        |L1.2262|
                  |L1.2160|
                          DCD      0x40010800
                  |L1.2164|
                          DCD      0x40010c00
                  |L1.2168|
                          DCD      0x40011000
                  |L1.2172|
                          DCD      0x40011400
                  |L1.2176|
                          DCD      0x40011800
                  |L1.2180|
                          DCD      0x40011c00
                  |L1.2184|
                          DCD      0x40012000
                  |L1.2188|
                          DCD      0x40010000
                  |L1.2192|
                          DCD      0x42200000
                  |L1.2196|
                          DCD      0x00180100
                  |L1.2200|
                          DCD      0x00180200
                  |L1.2204|
                          DCD      0x00180300
                  |L1.2208|
                          DCD      0x001a0800
                  |L1.2212|
                          DCD      0x001a0c00
                  |L1.2216|
                          DCD      0x00300100
                  |L1.2220|
                          DCD      0x00300200
                  |L1.2224|
                          DCD      0x00300400
                  |L1.2228|
                          DCD      0x00201100
                  |L1.2232|
                          DCD      0x00202000
                  |L1.2236|
                          DCD      0x80000010
                  |L1.2240|
                          DCD      0x80000200
                  |L1.2244|
                          DCD      0x80000400
                  |L1.2248|
                          DCD      0x80000800
                  |L1.2252|
                          DCD      0x80001000
                  |L1.2256|
                          DCD      0x80002000
                  |L1.2260|
0008d4  e018              B        |L1.2312|
                  |L1.2262|
0008d6  d017              BEQ      |L1.2312|
0008d8  2c07              CMP      r4,#7
0008da  d015              BEQ      |L1.2312|
0008dc  2c08              CMP      r4,#8
0008de  d013              BEQ      |L1.2312|
0008e0  2c09              CMP      r4,#9
0008e2  d011              BEQ      |L1.2312|
0008e4  2c0a              CMP      r4,#0xa
0008e6  d00f              BEQ      |L1.2312|
0008e8  2c0b              CMP      r4,#0xb
0008ea  d00d              BEQ      |L1.2312|
0008ec  2c0c              CMP      r4,#0xc
0008ee  d00b              BEQ      |L1.2312|
0008f0  2c0d              CMP      r4,#0xd
0008f2  d009              BEQ      |L1.2312|
0008f4  2c0e              CMP      r4,#0xe
0008f6  d007              BEQ      |L1.2312|
0008f8  2c0f              CMP      r4,#0xf
0008fa  d005              BEQ      |L1.2312|
0008fc  f2402166          MOV      r1,#0x266
000900  f2af40e8          ADR      r0,|L1.1052|
000904  f7fffffe          BL       assert_failed
                  |L1.2312|
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000908  07a0              LSLS     r0,r4,#30
00090a  0f02              LSRS     r2,r0,#28
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00090c  480e              LDR      r0,|L1.2376|
00090e  f0240303          BIC      r3,r4,#3
000912  4418              ADD      r0,r0,r3
000914  210f              MOVS     r1,#0xf               ;616
000916  6883              LDR      r3,[r0,#8]
000918  4091              LSLS     r1,r1,r2              ;616
00091a  438b              BICS     r3,r3,r1
00091c  6083              STR      r3,[r0,#8]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00091e  6881              LDR      r1,[r0,#8]
000920  4095              LSLS     r5,r5,r2
000922  4329              ORRS     r1,r1,r5
000924  6081              STR      r1,[r0,#8]
;;;619    }
000926  bd70              POP      {r4-r6,pc}
;;;620    
                          ENDP

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000928  b510              PUSH     {r4,lr}
;;;631    { 
00092a  0004              MOVS     r4,r0
00092c  d007              BEQ      |L1.2366|
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
00092e  2c01              CMP      r4,#1
000930  d005              BEQ      |L1.2366|
000932  f44f711e          MOV      r1,#0x278
000936  f2af501c          ADR      r0,|L1.1052|
00093a  f7fffffe          BL       assert_failed
                  |L1.2366|
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
00093e  4803              LDR      r0,|L1.2380|
000940  f8c040dc          STR      r4,[r0,#0xdc]
;;;636    }
000944  bd10              POP      {r4,pc}
;;;637      
                          ENDP

000946  0000              DCW      0x0000
                  |L1.2376|
                          DCD      0x40010000
                  |L1.2380|
                          DCD      0x42200000
