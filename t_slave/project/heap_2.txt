; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\heap_2.o --asm_dir=.\ --list_dir=.\ --depend=.\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I..\project -I..\..\rtos -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\heap_2.crf ..\..\rtos\heap_2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;144    
;;;145    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;146    {
000004  4604              MOV      r4,r0
;;;147    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;148    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;149    void *pvReturn = NULL;
000006  2500              MOVS     r5,#0
;;;150    
;;;151    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;152    	{
;;;153    		/* If this is the first call to malloc then the heap will require
;;;154    		initialisation to setup the list of free blocks. */
;;;155    		if( xHeapHasBeenInitialised == pdFALSE )
00000c  4a3a              LDR      r2,|L1.248|
00000e  f1020108          ADD      r1,r2,#8
000012  6850              LDR      r0,[r2,#4]  ; xHeapHasBeenInitialised
000014  f1010308          ADD      r3,r1,#8
000018  b968              CBNZ     r0,|L1.54|
00001a  4838              LDR      r0,|L1.252|
00001c  2700              MOVS     r7,#0
00001e  f0200007          BIC      r0,r0,#7
000022  e9c10700          STRD     r0,r7,[r1,#0]
000026  f24136f8          MOV      r6,#0x13f8
00002a  e9c37600          STRD     r7,r6,[r3,#0]
00002e  e9c03600          STRD     r3,r6,[r0,#0]
;;;156    		{
;;;157    			prvHeapInit();
;;;158    			xHeapHasBeenInitialised = pdTRUE;
000032  2001              MOVS     r0,#1
000034  6050              STR      r0,[r2,#4]  ; xHeapHasBeenInitialised
                  |L1.54|
;;;159    		}
;;;160    
;;;161    		/* The wanted size is increased so it can contain a BlockLink_t
;;;162    		structure in addition to the requested amount of bytes. */
;;;163    		if( xWantedSize > 0 )
;;;164    		{
;;;165    			xWantedSize += heapSTRUCT_SIZE;
;;;166    
;;;167    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;168    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
;;;169    			{
;;;170    				/* Byte alignment required. */
;;;171    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
;;;172    			}
;;;173    		}
;;;174    
;;;175    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
000036  f24130f7          MOV      r0,#0x13f7
00003a  b154              CBZ      r4,|L1.82|
00003c  3408              ADDS     r4,r4,#8              ;163
00003e  0766              LSLS     r6,r4,#29             ;168
000040  d004              BEQ      |L1.76|
000042  f0040607          AND      r6,r4,#7              ;171
000046  f1c60608          RSB      r6,r6,#8              ;171
00004a  4434              ADD      r4,r4,r6              ;171
                  |L1.76|
00004c  1e66              SUBS     r6,r4,#1
00004e  4286              CMP      r6,r0
000050  d302              BCC      |L1.88|
                  |L1.82|
;;;176    		{
;;;177    			/* Blocks are stored in byte order - traverse the list from the start
;;;178    			(smallest) block until one of adequate size is found. */
;;;179    			pxPreviousBlock = &xStart;
;;;180    			pxBlock = xStart.pxNextFreeBlock;
;;;181    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
;;;182    			{
;;;183    				pxPreviousBlock = pxBlock;
;;;184    				pxBlock = pxBlock->pxNextFreeBlock;
;;;185    			}
;;;186    
;;;187    			/* If we found the end marker then a block of adequate size was not found. */
;;;188    			if( pxBlock != &xEnd )
;;;189    			{
;;;190    				/* Return the memory space - jumping over the BlockLink_t structure
;;;191    				at its start. */
;;;192    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
;;;193    
;;;194    				/* This block is being returned for use so must be taken out of the
;;;195    				list of free blocks. */
;;;196    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
;;;197    
;;;198    				/* If the block is larger than required it can be split into two. */
;;;199    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
;;;200    				{
;;;201    					/* This block is to be split into two.  Create a new block
;;;202    					following the number of bytes requested. The void cast is
;;;203    					used to prevent byte alignment warnings from the compiler. */
;;;204    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
;;;205    
;;;206    					/* Calculate the sizes of two blocks split from the single
;;;207    					block. */
;;;208    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;209    					pxBlock->xBlockSize = xWantedSize;
;;;210    
;;;211    					/* Insert the new block into the list of free blocks. */
;;;212    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
;;;213    				}
;;;214    
;;;215    				xFreeBytesRemaining -= pxBlock->xBlockSize;
;;;216    			}
;;;217    		}
;;;218    
;;;219    		traceMALLOC( pvReturn, xWantedSize );
;;;220    	}
;;;221    	( void ) xTaskResumeAll();
000052  f7fffffe          BL       xTaskResumeAll
000056  e02a              B        |L1.174|
                  |L1.88|
000058  4827              LDR      r0,|L1.248|
00005a  6809              LDR      r1,[r1,#0]            ;180  ; xStart
00005c  3008              ADDS     r0,r0,#8              ;179
00005e  e001              B        |L1.100|
                  |L1.96|
000060  4608              MOV      r0,r1                 ;183
000062  4631              MOV      r1,r6                 ;183
                  |L1.100|
000064  684e              LDR      r6,[r1,#4]            ;181
000066  42a6              CMP      r6,r4                 ;181
000068  d202              BCS      |L1.112|
00006a  680e              LDR      r6,[r1,#0]            ;181
00006c  2e00              CMP      r6,#0                 ;181
00006e  d1f7              BNE      |L1.96|
                  |L1.112|
000070  4299              CMP      r1,r3                 ;188
000072  d0ee              BEQ      |L1.82|
000074  6805              LDR      r5,[r0,#0]            ;196
000076  680b              LDR      r3,[r1,#0]            ;196
000078  6003              STR      r3,[r0,#0]            ;199
00007a  6848              LDR      r0,[r1,#4]            ;199
00007c  3508              ADDS     r5,r5,#8              ;199
00007e  1b00              SUBS     r0,r0,r4              ;199
000080  2810              CMP      r0,#0x10              ;199
000082  d90d              BLS      |L1.160|
000084  190b              ADDS     r3,r1,r4              ;204
000086  6058              STR      r0,[r3,#4]            ;209
000088  481b              LDR      r0,|L1.248|
00008a  604c              STR      r4,[r1,#4]            ;212
00008c  3008              ADDS     r0,r0,#8              ;212
00008e  685e              LDR      r6,[r3,#4]            ;212
000090  e000              B        |L1.148|
                  |L1.146|
000092  4620              MOV      r0,r4                 ;212
                  |L1.148|
000094  6804              LDR      r4,[r0,#0]            ;212
000096  6867              LDR      r7,[r4,#4]            ;212
000098  42b7              CMP      r7,r6                 ;212
00009a  d3fa              BCC      |L1.146|
00009c  601c              STR      r4,[r3,#0]            ;212
00009e  6003              STR      r3,[r0,#0]            ;212
                  |L1.160|
0000a0  6848              LDR      r0,[r1,#4]            ;215
0000a2  6811              LDR      r1,[r2,#0]            ;215  ; xFreeBytesRemaining
0000a4  1a08              SUBS     r0,r1,r0              ;215
0000a6  6010              STR      r0,[r2,#0]  ; xFreeBytesRemaining
0000a8  f7fffffe          BL       xTaskResumeAll
0000ac  b90d              CBNZ     r5,|L1.178|
                  |L1.174|
;;;222    
;;;223    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;224    	{
;;;225    		if( pvReturn == NULL )
;;;226    		{
;;;227    			extern void vApplicationMallocFailedHook( void );
;;;228    			vApplicationMallocFailedHook();
0000ae  f7fffffe          BL       vApplicationMallocFailedHook
                  |L1.178|
;;;229    		}
;;;230    	}
;;;231    	#endif
;;;232    
;;;233    	return pvReturn;
0000b2  4628              MOV      r0,r5
;;;234    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;235    /*-----------------------------------------------------------*/
                          ENDP

                  vPortFree PROC
;;;236    
;;;237    void vPortFree( void *pv )
0000b8  b510              PUSH     {r4,lr}
;;;238    {
0000ba  2800              CMP      r0,#0
0000bc  d017              BEQ      |L1.238|
0000be  f1a00408          SUB      r4,r0,#8
;;;239    uint8_t *puc = ( uint8_t * ) pv;
;;;240    BlockLink_t *pxLink;
;;;241    
;;;242    	if( pv != NULL )
;;;243    	{
;;;244    		/* The memory being freed will have an BlockLink_t structure immediately
;;;245    		before it. */
;;;246    		puc -= heapSTRUCT_SIZE;
;;;247    
;;;248    		/* This unexpected casting is to keep some compilers from issuing
;;;249    		byte alignment warnings. */
;;;250    		pxLink = ( void * ) puc;
;;;251    
;;;252    		vTaskSuspendAll();
0000c2  f7fffffe          BL       vTaskSuspendAll
;;;253    		{
;;;254    			/* Add this block to the list of free blocks. */
;;;255    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
0000c6  480c              LDR      r0,|L1.248|
0000c8  6861              LDR      r1,[r4,#4]
0000ca  3008              ADDS     r0,r0,#8
0000cc  e000              B        |L1.208|
                  |L1.206|
0000ce  4610              MOV      r0,r2
                  |L1.208|
0000d0  6802              LDR      r2,[r0,#0]
0000d2  6853              LDR      r3,[r2,#4]
0000d4  428b              CMP      r3,r1
0000d6  d3fa              BCC      |L1.206|
0000d8  6022              STR      r2,[r4,#0]
;;;256    			xFreeBytesRemaining += pxLink->xBlockSize;
0000da  6004              STR      r4,[r0,#0]
0000dc  4806              LDR      r0,|L1.248|
0000de  6861              LDR      r1,[r4,#4]
0000e0  6802              LDR      r2,[r0,#0]  ; xFreeBytesRemaining
0000e2  4411              ADD      r1,r1,r2
;;;257    			traceFREE( pv, pxLink->xBlockSize );
;;;258    		}
;;;259    		( void ) xTaskResumeAll();
0000e4  6001              STR      r1,[r0,#0]  ; xFreeBytesRemaining
0000e6  e8bd4010          POP      {r4,lr}
0000ea  f7ffbffe          B.W      xTaskResumeAll
                  |L1.238|
;;;260    	}
;;;261    }
0000ee  bd10              POP      {r4,pc}
;;;262    /*-----------------------------------------------------------*/
                          ENDP

                  xPortGetFreeHeapSize PROC
;;;263    
;;;264    size_t xPortGetFreeHeapSize( void )
0000f0  4801              LDR      r0,|L1.248|
;;;265    {
;;;266    	return xFreeBytesRemaining;
0000f2  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;267    }
0000f4  4770              BX       lr
;;;268    /*-----------------------------------------------------------*/
                          ENDP

                  vPortInitialiseBlocks PROC
;;;269    
;;;270    void vPortInitialiseBlocks( void )
0000f6  4770              BX       lr
;;;271    {
;;;272    	/* This just exists to keep the linker quiet. */
;;;273    }
;;;274    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.248|
                          DCD      ||.data||
                  |L1.252|
                          DCD      ||.bss||+0x8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        5120

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x000013f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
