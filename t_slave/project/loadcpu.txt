; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\loadcpu.o --asm_dir=.\ --list_dir=.\ --depend=.\loadcpu.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I..\project -I..\..\rtos -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\loadcpu.crf ..\load_cpu\loadCPU.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vGetLoadCPU PROC
;;;4      
;;;5      void vGetLoadCPU( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;6      {
;;;7      uint8_t  cpuLCD;
;;;8      xCPUloadLCD=xQueueCreate( 8, sizeof( uint8_t ) );	
000002  2200              MOVS     r2,#0
000004  2101              MOVS     r1,#1
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4c08              LDR      r4,|L1.48|
00000e  6020              STR      r0,[r4,#0]  ; xCPUloadLCD
                  |L1.16|
;;;9      
;;;10      while (1) 
;;;11     			{
;;;12     			
;;;13     				
;;;14     			 cpuLCD=	(100 - GetCPU_IDLE());
000010  f7fffffe          BL       GetCPU_IDLE
000014  f1c00064          RSB      r0,r0,#0x64
000018  f88d0000          STRB     r0,[sp,#0]
;;;15     			 xQueueSend( xCPUloadLCD,  &cpuLCD, ( TickType_t ) 10 ); 	//and sending calculated speeds in a queue to log and display
00001c  2300              MOVS     r3,#0
00001e  220a              MOVS     r2,#0xa
000020  4669              MOV      r1,sp
000022  6820              LDR      r0,[r4,#0]  ; xCPUloadLCD
000024  f7fffffe          BL       xQueueGenericSend
;;;16     			//to sd card
;;;17     			
;;;18     				#ifdef DEBUG
;;;19     				  // printf("\r\n cpu= %d",cpuLCD);
;;;20     				#endif
;;;21     //				lcd_clrscr();
;;;22     //				lcd_goto(1,0);
;;;23     //				lcd_puts("CPU=");
;;;24     //				lcd_itos(cpuLCD);
;;;25     //				lcd_putc('%');
;;;26     //				lcd_goto(2,0);
;;;27     //				lcd_puts(":)");
;;;28     				vTaskDelay(100/ portTICK_PERIOD_MS);	
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       vTaskDelay
00002e  e7ef              B        |L1.16|
;;;29     			}
;;;30     }
;;;31      
                          ENDP

                  |L1.48|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  xCPUloadLCD
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\load_cpu\\loadCPU.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_loadCPU_c_86e13999____REV16|
#line 129 "C:\\Program Files\\keil\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_loadCPU_c_86e13999____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_loadCPU_c_86e13999____REVSH|
#line 144
|__asm___9_loadCPU_c_86e13999____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
