; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\main.o --asm_dir=.\ --list_dir=.\ --depend=.\main.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\CMSIS\CM3\CoreSupport -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\STM32F10x_StdPeriph_Driver\inc -I..\STM32F10x_StdPeriph_Driver\src -I..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\main.crf ..\main\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gpio_init PROC
;;;39     	
;;;40     void gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;41     {
;;;42           GPIO_InitTypeDef port;
;;;43     		  //---------leds init---------------------------------
;;;44     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;45     	 
;;;46     			GPIO_StructInit(&port);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GPIO_StructInit
;;;47     			port.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;48     			port.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
000016  20fe              MOVS     r0,#0xfe
000018  f8ad0000          STRH     r0,[sp,#0]
;;;49     			port.GPIO_Speed = GPIO_Speed_10MHz;
00001c  2001              MOVS     r0,#1
00001e  f88d0002          STRB     r0,[sp,#2]
;;;50     			GPIO_Init(GPIOA, &port);
000022  4669              MOV      r1,sp
000024  482c              LDR      r0,|L1.216|
000026  f7fffffe          BL       GPIO_Init
;;;51     }
00002a  bd08              POP      {r3,pc}
;;;52     	
                          ENDP

                  main PROC
;;;4      
;;;5      int main()
00002c  b51f              PUSH     {r0-r4,lr}
;;;6      	{
;;;7      		//-------------------------------------------------start initialisation---------------------------------------
;;;8      		
;;;9      		//PrintfConfig();
;;;10     		gpio_init(); 
00002e  f7fffffe          BL       gpio_init
;;;11     		
;;;12     //		printf("\r\n ----------------------------------------------------------------------------------");	
;;;13     //		printf("\r\n|                                !stm32f100vldiscovery!                             |");
;;;14     //		printf("\r\n|                                  !freeRTOS v8.1.2!                                |");
;;;15     //		printf("\r\n----------------------------------------------------------------------------------");	
;;;16     		
;;;17     		
;;;18     		
;;;19     		//-------------------------------------------------tasks start------------------------------------------------
;;;20     		
;;;21     		xTaskCreate(vLedTask,(const char*)"LedTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
000032  2400              MOVS     r4,#0
000034  2501              MOVS     r5,#1
000036  e9cd5400          STRD     r5,r4,[sp,#0]
00003a  9402              STR      r4,[sp,#8]
00003c  4623              MOV      r3,r4
00003e  2246              MOVS     r2,#0x46
000040  a126              ADR      r1,|L1.220|
000042  4828              LDR      r0,|L1.228|
000044  9403              STR      r4,[sp,#0xc]
000046  f7fffffe          BL       xTaskGenericCreate
00004a  e9cd5400          STRD     r5,r4,[sp,#0]
;;;22     		xTaskCreate(vGetLoadCPU,(const char*)"getLoadCPU",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
00004e  9402              STR      r4,[sp,#8]
000050  2300              MOVS     r3,#0
000052  2246              MOVS     r2,#0x46
000054  a124              ADR      r1,|L1.232|
000056  4827              LDR      r0,|L1.244|
000058  9403              STR      r4,[sp,#0xc]
00005a  f7fffffe          BL       xTaskGenericCreate
00005e  e9cd5400          STRD     r5,r4,[sp,#0]
;;;23     		
;;;24     		xTaskCreate(vModeTask,(const char*)"modeTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
000062  9402              STR      r4,[sp,#8]
000064  2300              MOVS     r3,#0
000066  2246              MOVS     r2,#0x46
000068  a123              ADR      r1,|L1.248|
00006a  4826              LDR      r0,|L1.260|
00006c  9403              STR      r4,[sp,#0xc]
00006e  f7fffffe          BL       xTaskGenericCreate
000072  e9cd5400          STRD     r5,r4,[sp,#0]
;;;25     	  xTaskCreate(vLimitSwitchTask,(const char*)"limitTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
000076  9402              STR      r4,[sp,#8]
000078  2300              MOVS     r3,#0
00007a  2246              MOVS     r2,#0x46
00007c  a122              ADR      r1,|L1.264|
00007e  4825              LDR      r0,|L1.276|
000080  9403              STR      r4,[sp,#0xc]
000082  f7fffffe          BL       xTaskGenericCreate
000086  e9cd5400          STRD     r5,r4,[sp,#0]
;;;26     		xTaskCreate(vControlTask,(const char*)"controlTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
00008a  9402              STR      r4,[sp,#8]
00008c  2300              MOVS     r3,#0
00008e  2246              MOVS     r2,#0x46
000090  a121              ADR      r1,|L1.280|
000092  4824              LDR      r0,|L1.292|
000094  9403              STR      r4,[sp,#0xc]
000096  f7fffffe          BL       xTaskGenericCreate
00009a  e9cd5400          STRD     r5,r4,[sp,#0]
;;;27     	 // xTaskCreate(vMoveTask,(const char*)"moveTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
;;;28     		xTaskCreate(vLcdTask,(const char*)"lcdTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
00009e  9402              STR      r4,[sp,#8]
0000a0  2300              MOVS     r3,#0
0000a2  2246              MOVS     r2,#0x46
0000a4  a120              ADR      r1,|L1.296|
0000a6  4822              LDR      r0,|L1.304|
0000a8  9403              STR      r4,[sp,#0xc]
0000aa  f7fffffe          BL       xTaskGenericCreate
0000ae  e9cd5400          STRD     r5,r4,[sp,#0]
;;;29     		xTaskCreate(vHitTask,(const char*)"HitTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
0000b2  9402              STR      r4,[sp,#8]
0000b4  2300              MOVS     r3,#0
0000b6  2246              MOVS     r2,#0x46
0000b8  a11e              ADR      r1,|L1.308|
0000ba  4820              LDR      r0,|L1.316|
0000bc  9403              STR      r4,[sp,#0xc]
0000be  f7fffffe          BL       xTaskGenericCreate
;;;30     		
;;;31     		vTaskStartScheduler();  //
0000c2  f7fffffe          BL       vTaskStartScheduler
                  |L1.198|
;;;32     		
;;;33     		while(1)
;;;34     			{
;;;35     					__NOP();
0000c6  bf00              NOP      
0000c8  e7fd              B        |L1.198|
;;;36     			}
;;;37     	}
;;;38     	
                          ENDP

                  assert_failed PROC
;;;54     
;;;55     void assert_failed(uint8_t* file, uint32_t line)
0000ca  460a              MOV      r2,r1
;;;56     { 
;;;57       
;;;58       printf ("\r\n  file %s /n line= %d",file,line);
0000cc  4601              MOV      r1,r0
0000ce  a01c              ADR      r0,|L1.320|
0000d0  f7fffffe          BL       __2printf
                  |L1.212|
;;;59       
;;;60       while (1)
;;;61       {
;;;62      __NOP();
0000d4  bf00              NOP      
0000d6  e7fd              B        |L1.212|
;;;63     	}
;;;64     }
;;;65     #endif
                          ENDP

                  |L1.216|
                          DCD      0x40010800
                  |L1.220|
0000dc  4c656454          DCB      "LedTask",0
0000e0  61736b00
                  |L1.228|
                          DCD      vLedTask
                  |L1.232|
0000e8  6765744c          DCB      "getLoadCPU",0
0000ec  6f616443
0000f0  505500  
0000f3  00                DCB      0
                  |L1.244|
                          DCD      vGetLoadCPU
                  |L1.248|
0000f8  6d6f6465          DCB      "modeTask",0
0000fc  5461736b
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L1.260|
                          DCD      vModeTask
                  |L1.264|
000108  6c696d69          DCB      "limitTask",0
00010c  74546173
000110  6b00    
000112  00                DCB      0
000113  00                DCB      0
                  |L1.276|
                          DCD      vLimitSwitchTask
                  |L1.280|
000118  636f6e74          DCB      "controlTask",0
00011c  726f6c54
000120  61736b00
                  |L1.292|
                          DCD      vControlTask
                  |L1.296|
000128  6c636454          DCB      "lcdTask",0
00012c  61736b00
                  |L1.304|
                          DCD      vLcdTask
                  |L1.308|
000134  48697454          DCB      "HitTask",0
000138  61736b00
                  |L1.316|
                          DCD      vHitTask
                  |L1.320|
000140  0d0a2020          DCB      "\r\n  file %s /n line= %d",0
000144  66696c65
000148  20257320
00014c  2f6e206c
000150  696e653d
000154  20256400

                  __ARM_use_no_argv EQU 0
