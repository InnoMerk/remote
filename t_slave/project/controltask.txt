; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\controltask.o --asm_dir=.\ --list_dir=.\ --depend=.\controltask.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I..\project -I..\..\rtos -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\controltask.crf ..\control_task\controlTask.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CloseAllTransistors PROC
;;;252    
;;;253    void CloseAllTransistors(void)
000000  b510              PUSH     {r4,lr}
;;;254    {
;;;255    	GPIO_ResetBits(GPIOA, T1);
000002  4cb7              LDR      r4,|L1.736|
000004  f44f7180          MOV      r1,#0x100
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_ResetBits
;;;256      GPIO_ResetBits(GPIOA, T2);
00000e  1561              ASRS     r1,r4,#21
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       GPIO_ResetBits
;;;257    	GPIO_ResetBits(GPIOA, T3);
000016  1521              ASRS     r1,r4,#20
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GPIO_ResetBits
;;;258    	GPIO_ResetBits(GPIOA, T4);
00001e  14e1              ASRS     r1,r4,#19
000020  4620              MOV      r0,r4
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      GPIO_ResetBits
;;;259    }
;;;260    
                          ENDP

                  openReversePair PROC
;;;261    void openReversePair(void)
00002a  b510              PUSH     {r4,lr}
;;;262    {
;;;263    	GPIO_SetBits(GPIOA, T2);
00002c  4cac              LDR      r4,|L1.736|
00002e  f44f7100          MOV      r1,#0x200
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_SetBits
;;;264    	GPIO_SetBits(GPIOA, T4);
000038  14e1              ASRS     r1,r4,#19
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  f7ffbffe          B.W      GPIO_SetBits
;;;265    }
;;;266    void openForwardPair(void)
                          ENDP

                  openForwardPair PROC
000044  b510              PUSH     {r4,lr}
;;;267    {
;;;268      GPIO_SetBits(GPIOA, T1);
000046  4ca6              LDR      r4,|L1.736|
000048  f44f7180          MOV      r1,#0x100
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GPIO_SetBits
;;;269    	GPIO_SetBits(GPIOA, T3);
000052  1521              ASRS     r1,r4,#20
000054  4620              MOV      r0,r4
000056  e8bd4010          POP      {r4,lr}
00005a  f7ffbffe          B.W      GPIO_SetBits
;;;270    }
;;;271    
                          ENDP

                  outputsInit PROC
;;;238    
;;;239    void outputsInit(void)
00005e  b508              PUSH     {r3,lr}
;;;240    {
;;;241    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000060  2101              MOVS     r1,#1
000062  2004              MOVS     r0,#4
000064  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;242    
;;;243      GPIO_InitTypeDef gpio;
;;;244      GPIO_StructInit(&gpio);
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       GPIO_StructInit
;;;245      gpio.GPIO_Mode = GPIO_Mode_Out_PP;
00006e  2010              MOVS     r0,#0x10
000070  f88d0003          STRB     r0,[sp,#3]
;;;246      gpio.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9|GPIO_Pin_10 | GPIO_Pin_11;
000074  f44f6070          MOV      r0,#0xf00
000078  f8ad0000          STRH     r0,[sp,#0]
;;;247      gpio.GPIO_Speed = GPIO_Speed_2MHz;
00007c  2002              MOVS     r0,#2
00007e  f88d0002          STRB     r0,[sp,#2]
;;;248      GPIO_Init(GPIOA, &gpio);
000082  4669              MOV      r1,sp
000084  4896              LDR      r0,|L1.736|
000086  f7fffffe          BL       GPIO_Init
;;;249    	
;;;250    	CloseAllTransistors();
00008a  f7fffffe          BL       CloseAllTransistors
;;;251    }
00008e  bd08              POP      {r3,pc}
;;;252    
                          ENDP

                  vControlTask PROC
;;;28     
;;;29     void vControlTask (void *pvParameters)
000090  b50e              PUSH     {r1-r3,lr}
;;;30     {
;;;31     	outputsInit();
000092  f7fffffe          BL       outputsInit
;;;32     	
;;;33     	/*xDirectionQueue = xQueueCreate( 8, sizeof( uint8_t ) );*/
;;;34     	uint8_t rxMode=0; 
000096  2500              MOVS     r5,#0
;;;35     	uint8_t rxCPU=0;
;;;36     	uint8_t rxLimit=0;
;;;37     	uint8_t rxHit=0;
;;;38     	
;;;39     	for(;;)
;;;40     	{
;;;41     		
;;;42     		
;;;43     		if( xQueueReceive( xModeQueueCTRL, &rxMode, ( TickType_t ) 0 ) )     continue;			
000098  4f92              LDR      r7,|L1.740|
;;;44     		if( xQueueReceive( xLimiterQueueCTRL, &rxLimit, ( TickType_t ) 0 ) ) continue;
;;;45     		
;;;46     		
;;;47     		switch (rxMode)
;;;48     		{
;;;49     			
;;;50     			//------------------------------------------------------------------------------
;;;51     
;;;52     			case WAITING_MODE:
;;;53     			{
;;;54     				
;;;55     				if(DOWN!=rxLimit||DOWN_LIMIT!=rxLimit)
;;;56     				{
;;;57     					CloseAllTransistors();
;;;58     					openReversePair();
;;;59     				}
;;;60     				if(DOWN_LIMIT == rxLimit||DOWN==rxLimit){CloseAllTransistors();}
;;;61     				
;;;62     				break;	
;;;63     			}	
;;;64     			//-------------------------------------------------------------------------------
;;;65     			case STATIC_MODE:
;;;66     			/*body*/
;;;67     			{
;;;68     				if( xQueueReceive( xHitQueueCTRL, &rxHit, ( TickType_t ) 0 ) ) continue;
00009a  4e93              LDR      r6,|L1.744|
;;;69     				
;;;70     				static uint8_t static_state =MOVING_UP_STATE;
;;;71     				switch(static_state)
00009c  4c93              LDR      r4,|L1.748|
00009e  f88d5008          STRB     r5,[sp,#8]            ;34
0000a2  f88d5000          STRB     r5,[sp,#0]            ;36
0000a6  f88d5004          STRB     r5,[sp,#4]            ;37
0000aa  f04f0814          MOV      r8,#0x14              ;36
0000ae  f04f091e          MOV      r9,#0x1e
0000b2  f04f0a0a          MOV      r10,#0xa
                  |L1.182|
0000b6  2300              MOVS     r3,#0                 ;43
0000b8  461a              MOV      r2,r3                 ;43
0000ba  a902              ADD      r1,sp,#8              ;43
0000bc  6838              LDR      r0,[r7,#0]            ;43  ; xModeQueueCTRL
0000be  f7fffffe          BL       xQueueGenericReceive
0000c2  2800              CMP      r0,#0                 ;43
0000c4  d1f7              BNE      |L1.182|
0000c6  488a              LDR      r0,|L1.752|
0000c8  2300              MOVS     r3,#0                 ;44
0000ca  461a              MOV      r2,r3                 ;44
0000cc  4669              MOV      r1,sp                 ;44
0000ce  6800              LDR      r0,[r0,#0]            ;44  ; xLimiterQueueCTRL
0000d0  f7fffffe          BL       xQueueGenericReceive
0000d4  2800              CMP      r0,#0                 ;44
0000d6  d1ee              BNE      |L1.182|
0000d8  f89d0008          LDRB     r0,[sp,#8]            ;47
0000dc  281e              CMP      r0,#0x1e              ;47
0000de  d053              BEQ      |L1.392|
0000e0  dc04              BGT      |L1.236|
0000e2  280a              CMP      r0,#0xa               ;47
0000e4  d007              BEQ      |L1.246|
0000e6  2814              CMP      r0,#0x14              ;47
0000e8  d111              BNE      |L1.270|
0000ea  e011              B        |L1.272|
                  |L1.236|
0000ec  2828              CMP      r0,#0x28              ;47
0000ee  d00e              BEQ      |L1.270|
0000f0  2832              CMP      r0,#0x32              ;47
0000f2  d10c              BNE      |L1.270|
0000f4  e0c3              B        |L1.638|
                  |L1.246|
0000f6  f7fffffe          BL       CloseAllTransistors
0000fa  f7fffffe          BL       openReversePair
0000fe  f89d0000          LDRB     r0,[sp,#0]            ;60
000102  2828              CMP      r0,#0x28              ;60
000104  d001              BEQ      |L1.266|
000106  2814              CMP      r0,#0x14              ;60
000108  d101              BNE      |L1.270|
                  |L1.266|
00010a  f7fffffe          BL       CloseAllTransistors
                  |L1.270|
00010e  e0b2              B        |L1.630|
                  |L1.272|
000110  2300              MOVS     r3,#0                 ;68
000112  461a              MOV      r2,r3                 ;68
000114  a901              ADD      r1,sp,#4              ;68
000116  6830              LDR      r0,[r6,#0]            ;68  ; xHitQueueCTRL
000118  f7fffffe          BL       xQueueGenericReceive
00011c  2800              CMP      r0,#0                 ;68
00011e  d1ca              BNE      |L1.182|
000120  7820              LDRB     r0,[r4,#0]  ; static_state
000122  280a              CMP      r0,#0xa
000124  d004              BEQ      |L1.304|
000126  2814              CMP      r0,#0x14
000128  d013              BEQ      |L1.338|
00012a  281e              CMP      r0,#0x1e
00012c  d128              BNE      |L1.384|
00012e  e01b              B        |L1.360|
                  |L1.304|
;;;72     				{
;;;73     					case MOVING_UP_STATE:
;;;74     					{
;;;75     						if(/*UP!=rxLimit||*/UP_LIMIT!=rxLimit)
000130  f89d0000          LDRB     r0,[sp,#0]
000134  281e              CMP      r0,#0x1e
000136  d007              BEQ      |L1.328|
;;;76     						{
;;;77     							CloseAllTransistors();
000138  f7fffffe          BL       CloseAllTransistors
;;;78     							openForwardPair();
00013c  f7fffffe          BL       openForwardPair
;;;79     						}
;;;80     						if(/*UP==rxLimit||*/UP_LIMIT==rxLimit)
000140  f89d0000          LDRB     r0,[sp,#0]
000144  281e              CMP      r0,#0x1e
000146  d11b              BNE      |L1.384|
                  |L1.328|
;;;81     						{	
;;;82     							CloseAllTransistors();
000148  f7fffffe          BL       CloseAllTransistors
;;;83     							static_state=UP_WAIT_STATE;
00014c  f8848000          STRB     r8,[r4,#0]
000150  e016              B        |L1.384|
                  |L1.338|
;;;84     						}
;;;85     						break;	
;;;86     					}	
;;;87     					case UP_WAIT_STATE:
;;;88     					{
;;;89     						if(SHOT==rxHit)
000152  f89d0004          LDRB     r0,[sp,#4]
000156  280a              CMP      r0,#0xa
000158  d112              BNE      |L1.384|
;;;90     						{
;;;91     							CloseAllTransistors();
00015a  f7fffffe          BL       CloseAllTransistors
;;;92     							openReversePair();
00015e  f7fffffe          BL       openReversePair
;;;93     							static_state=MOVING_DOWN_STATE;
000162  f8849000          STRB     r9,[r4,#0]
000166  e00b              B        |L1.384|
                  |L1.360|
;;;94     						}	
;;;95     						break;	
;;;96     					}
;;;97     					case MOVING_DOWN_STATE:
;;;98     					{	
;;;99     						if(DOWN_LIMIT == rxLimit/*||DOWN==rxLimit*/)
000168  f89d0000          LDRB     r0,[sp,#0]
00016c  2828              CMP      r0,#0x28
00016e  d107              BNE      |L1.384|
;;;100    						{
;;;101    							  CloseAllTransistors();
000170  f7fffffe          BL       CloseAllTransistors
;;;102    								vTaskDelay(6000/portTICK_PERIOD_MS);
000174  f2417070          MOV      r0,#0x1770
000178  f7fffffe          BL       vTaskDelay
;;;103    								static_state=MOVING_UP_STATE;
00017c  f884a000          STRB     r10,[r4,#0]
                  |L1.384|
;;;104    						}
;;;105    						break;	
;;;106    					}
;;;107    					default:
;;;108    					{
;;;109    					}
;;;110    				}	
;;;111    			
;;;112    				
;;;113    				vTaskDelay(100 / portTICK_PERIOD_MS);
000180  2064              MOVS     r0,#0x64
000182  f7fffffe          BL       vTaskDelay
;;;114    				break;
000186  e076              B        |L1.630|
                  |L1.392|
;;;115    			}	
;;;116    			//----------------------------------------------------------------------------
;;;117    			case RANDOM_MODE:
;;;118    			{
;;;119    				static uint8_t random_state =MOVING_UP_STATE;
;;;120    				static uint16_t timeUp=1500;
;;;121    				static uint16_t timeDown=1500;
;;;122    				static uint16_t UpTimeOut=0;
;;;123    				static uint16_t DownTimeOut=0;
;;;124    				
;;;125    				if( xQueueReceive( xHitQueueCTRL, &rxHit, ( TickType_t ) 0 ) ) continue;
000188  2300              MOVS     r3,#0
00018a  461a              MOV      r2,r3
00018c  a901              ADD      r1,sp,#4
00018e  6830              LDR      r0,[r6,#0]  ; xHitQueueCTRL
000190  f7fffffe          BL       xQueueGenericReceive
000194  2800              CMP      r0,#0
000196  d18e              BNE      |L1.182|
;;;126    				
;;;127    				switch(random_state)
000198  7860              LDRB     r0,[r4,#1]  ; random_state
00019a  280a              CMP      r0,#0xa
00019c  d006              BEQ      |L1.428|
00019e  2814              CMP      r0,#0x14
0001a0  d035              BEQ      |L1.526|
0001a2  281e              CMP      r0,#0x1e
0001a4  d050              BEQ      |L1.584|
0001a6  2828              CMP      r0,#0x28
0001a8  d165              BNE      |L1.630|
0001aa  e056              B        |L1.602|
                  |L1.428|
;;;128    				{
;;;129    					case MOVING_UP_STATE:
;;;130    					{
;;;131    						timeUp=(rand()%6 + 1)*STEP;
0001ac  f7fffffe          BL       rand
0001b0  f04f0b06          MOV      r11,#6
0001b4  fb90f2fb          SDIV     r2,r0,r11
0001b8  fb0b0012          MLS      r0,r11,r2,r0
0001bc  1c40              ADDS     r0,r0,#1
0001be  eb000140          ADD      r1,r0,r0,LSL #1
0001c2  ebc111c0          RSB      r1,r1,r0,LSL #7
0001c6  f64f70ff          MOV      r0,#0xffff
0001ca  ea000081          AND      r0,r0,r1,LSL #2
0001ce  8060              STRH     r0,[r4,#2]
;;;132    						timeDown=(rand()%6 + 1)*STEP;
0001d0  f7fffffe          BL       rand
0001d4  fb90f2fb          SDIV     r2,r0,r11
0001d8  fb0b0012          MLS      r0,r11,r2,r0
0001dc  1c40              ADDS     r0,r0,#1
0001de  eb000140          ADD      r1,r0,r0,LSL #1
0001e2  ebc111c0          RSB      r1,r1,r0,LSL #7
0001e6  f64f70ff          MOV      r0,#0xffff
0001ea  ea000081          AND      r0,r0,r1,LSL #2
0001ee  80a0              STRH     r0,[r4,#4]
;;;133    						
;;;134    						if(UP!=rxLimit||UP_LIMIT!=rxLimit)
;;;135    						{
;;;136    							CloseAllTransistors();
0001f0  f7fffffe          BL       CloseAllTransistors
;;;137    							openForwardPair();
0001f4  f7fffffe          BL       openForwardPair
;;;138    						}
;;;139    						if(UP==rxLimit||UP_LIMIT==rxLimit)
0001f8  f89d0000          LDRB     r0,[sp,#0]
0001fc  280a              CMP      r0,#0xa
0001fe  d001              BEQ      |L1.516|
000200  281e              CMP      r0,#0x1e
000202  d138              BNE      |L1.630|
                  |L1.516|
;;;140    						{	
;;;141    							CloseAllTransistors();
000204  f7fffffe          BL       CloseAllTransistors
;;;142    							random_state=UP_WAIT_STATE;
000208  f8848001          STRB     r8,[r4,#1]
00020c  e033              B        |L1.630|
                  |L1.526|
;;;143    						}
;;;144    						
;;;145    						break;	
;;;146    					}	
;;;147    					case UP_WAIT_STATE:
;;;148    					{
;;;149    						UpTimeOut+=100;
00020e  88e0              LDRH     r0,[r4,#6]  ; UpTimeOut
000210  3064              ADDS     r0,r0,#0x64
000212  80e0              STRH     r0,[r4,#6]
;;;150    						if(SHOT==rxHit)
000214  f89d0004          LDRB     r0,[sp,#4]
000218  280a              CMP      r0,#0xa
00021a  d109              BNE      |L1.560|
;;;151    						{
;;;152    							CloseAllTransistors();
00021c  f7fffffe          BL       CloseAllTransistors
;;;153    							openReversePair();
000220  f7fffffe          BL       openReversePair
;;;154    							UpTimeOut=0;
000224  80e5              STRH     r5,[r4,#6]
;;;155    							timeDown=5000;
000226  f2413088          MOV      r0,#0x1388
00022a  80a0              STRH     r0,[r4,#4]
;;;156    							random_state=MOVING_DOWN_STATE;
00022c  f8849001          STRB     r9,[r4,#1]
                  |L1.560|
;;;157    						}	
;;;158    						if(UpTimeOut>timeUp)
000230  88e0              LDRH     r0,[r4,#6]  ; UpTimeOut
000232  8861              LDRH     r1,[r4,#2]  ; timeUp
000234  4288              CMP      r0,r1
000236  d91e              BLS      |L1.630|
;;;159    						{
;;;160    							CloseAllTransistors();
000238  f7fffffe          BL       CloseAllTransistors
;;;161    							openReversePair();
00023c  f7fffffe          BL       openReversePair
;;;162    							UpTimeOut=0;
000240  80e5              STRH     r5,[r4,#6]
;;;163    							random_state=MOVING_DOWN_STATE;
000242  f8849001          STRB     r9,[r4,#1]
000246  e016              B        |L1.630|
                  |L1.584|
;;;164    						}	
;;;165    						break;	
;;;166    					}
;;;167    					case MOVING_DOWN_STATE:
;;;168    					{	
;;;169    						if(DOWN_LIMIT == rxLimit/*||DOWN==rxLimit*/)
000248  f89d0000          LDRB     r0,[sp,#0]
00024c  2828              CMP      r0,#0x28
00024e  d112              BNE      |L1.630|
;;;170    						{
;;;171    							  CloseAllTransistors();
000250  f7fffffe          BL       CloseAllTransistors
;;;172    								random_state=DOWN_WAIT_STATE;
000254  2028              MOVS     r0,#0x28
000256  7060              STRB     r0,[r4,#1]
000258  e00d              B        |L1.630|
                  |L1.602|
;;;173    						}
;;;174    						break;	
;;;175    					}
;;;176    					case DOWN_WAIT_STATE:
;;;177    					{
;;;178    						DownTimeOut+=100;
00025a  8920              LDRH     r0,[r4,#8]  ; DownTimeOut
00025c  3064              ADDS     r0,r0,#0x64
00025e  b280              UXTH     r0,r0
000260  8120              STRH     r0,[r4,#8]
;;;179    						if(DownTimeOut>timeDown)
000262  88a1              LDRH     r1,[r4,#4]  ; timeDown
000264  4288              CMP      r0,r1
000266  d906              BLS      |L1.630|
;;;180    						{
;;;181    							CloseAllTransistors();
000268  f7fffffe          BL       CloseAllTransistors
;;;182    							openForwardPair();
00026c  f7fffffe          BL       openForwardPair
;;;183    							DownTimeOut=0;
000270  8125              STRH     r5,[r4,#8]
;;;184    							random_state=MOVING_UP_STATE;
000272  f884a001          STRB     r10,[r4,#1]
                  |L1.630|
;;;185    						}		
;;;186    						break;	
;;;187    					}
;;;188    					default:
;;;189    					{
;;;190    					}
;;;191    				}	
;;;192    			
;;;193    				break;
;;;194    			}	
;;;195    			//--------------------
;;;196    			case RADIOCONTROL_MODE:
;;;197    			{
;;;198    				
;;;199    			
;;;200    				break;
;;;201    			}	
;;;202    			case TEST_MODE:
;;;203    			{
;;;204    				vTaskDelay(3000/ portTICK_PERIOD_MS);	
;;;205    				openForwardPair();
;;;206    				vTaskDelay(3000/ portTICK_PERIOD_MS);	
;;;207    				
;;;208    				CloseAllTransistors();
;;;209    				vTaskDelay(500/ portTICK_PERIOD_MS);
;;;210    				
;;;211    				openReversePair();
;;;212    				vTaskDelay(3000/ portTICK_PERIOD_MS);
;;;213    				
;;;214    				CloseAllTransistors();
;;;215    			break;
;;;216    			}	
;;;217    			//--------------------
;;;218    			default:
;;;219    			{
;;;220    			/*xQueueSend( xDirectionQueue, &txDirection, ( TickType_t ) 0 );	*/
;;;221    			
;;;222    				
;;;223    			}		
;;;224    			/**/
;;;225    		}
;;;226    	vTaskDelay(100/ portTICK_PERIOD_MS);
000276  2064              MOVS     r0,#0x64
000278  f7fffffe          BL       vTaskDelay
00027c  e71b              B        |L1.182|
                  |L1.638|
00027e  f6403bb8          MOV      r11,#0xbb8            ;204
000282  4658              MOV      r0,r11                ;204
000284  f7fffffe          BL       vTaskDelay
000288  f7fffffe          BL       openForwardPair
00028c  4658              MOV      r0,r11                ;206
00028e  f7fffffe          BL       vTaskDelay
000292  f7fffffe          BL       CloseAllTransistors
000296  f44f70fa          MOV      r0,#0x1f4             ;209
00029a  f7fffffe          BL       vTaskDelay
00029e  f7fffffe          BL       openReversePair
0002a2  4658              MOV      r0,r11                ;212
0002a4  f7fffffe          BL       vTaskDelay
0002a8  e72f              B        |L1.266|
;;;227    	}	
;;;228    	vTaskDelete(NULL);
;;;229    
;;;230    }
;;;231    
                          ENDP

                  closeReversePair PROC
;;;271    
;;;272    void closeReversePair(void)
0002aa  b510              PUSH     {r4,lr}
;;;273    {
;;;274    	GPIO_ResetBits(GPIOA, T2);
0002ac  4c0c              LDR      r4,|L1.736|
0002ae  f44f7100          MOV      r1,#0x200
0002b2  4620              MOV      r0,r4
0002b4  f7fffffe          BL       GPIO_ResetBits
;;;275    	GPIO_ResetBits(GPIOA, T4);	
0002b8  14e1              ASRS     r1,r4,#19
0002ba  4620              MOV      r0,r4
0002bc  e8bd4010          POP      {r4,lr}
0002c0  f7ffbffe          B.W      GPIO_ResetBits
;;;276    }
;;;277    
                          ENDP

                  closeForwardPair PROC
;;;278    void closeForwardPair(void)
0002c4  b510              PUSH     {r4,lr}
;;;279    {
;;;280    	GPIO_ResetBits(GPIOA, T1);
0002c6  4c06              LDR      r4,|L1.736|
0002c8  f44f7180          MOV      r1,#0x100
0002cc  4620              MOV      r0,r4
0002ce  f7fffffe          BL       GPIO_ResetBits
;;;281    	GPIO_ResetBits(GPIOA, T3);	
0002d2  1521              ASRS     r1,r4,#20
0002d4  4620              MOV      r0,r4
0002d6  e8bd4010          POP      {r4,lr}
0002da  f7ffbffe          B.W      GPIO_ResetBits
;;;282    }
;;;283    
                          ENDP

0002de  0000              DCW      0x0000
                  |L1.736|
                          DCD      0x40010800
                  |L1.740|
                          DCD      xModeQueueCTRL
                  |L1.744|
                          DCD      xHitQueueCTRL
                  |L1.748|
                          DCD      ||.data||
                  |L1.752|
                          DCD      xLimiterQueueCTRL

                          AREA ||.data||, DATA, ALIGN=1

                  static_state
000000  0a                DCB      0x0a
                  random_state
000001  0a                DCB      0x0a
                  timeUp
000002  05dc              DCW      0x05dc
                  timeDown
000004  05dc              DCW      0x05dc
                  UpTimeOut
000006  0000              DCW      0x0000
                  DownTimeOut
000008  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\control_task\\controlTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_controlTask_c_6ec04af2____REV16|
#line 129 "C:\\Program Files\\keil\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_controlTask_c_6ec04af2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_controlTask_c_6ec04af2____REVSH|
#line 144
|__asm___13_controlTask_c_6ec04af2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
