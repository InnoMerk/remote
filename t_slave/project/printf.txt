; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\printf.o --asm_dir=.\ --list_dir=.\ --depend=.\printf.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\limit_switch -I..\control_task -I..\mode_task -I..\lcdTask -I..\hit -I..\move_task -I..\project -I..\..\rtos -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\printf.crf ..\printf\printf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sendchar PROC
;;;14     //-------------------------------------------------
;;;15     int sendchar(int ch)
000000  b570              PUSH     {r4-r6,lr}
;;;16     	{
;;;17     		while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);
000002  4d2a              LDR      r5,|L1.172|
000004  4604              MOV      r4,r0                 ;16
                  |L1.6|
000006  2180              MOVS     r1,#0x80
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L1.6|
;;;18     		USART_SendData(USARTx, ch);
000012  b2a1              UXTH     r1,r4
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       USART_SendData
;;;19     	return 0;
00001a  2000              MOVS     r0,#0
;;;20     	}
00001c  bd70              POP      {r4-r6,pc}
;;;21     //------------------------------------------------	
                          ENDP

                  fputc PROC
;;;9      //-------------------------------------------------
;;;10     int fputc(int ch, FILE *f) 
00001e  e7fe              B        sendchar
;;;11     	{
;;;12     		return (sendchar(ch));
;;;13     	}
;;;14     //-------------------------------------------------
                          ENDP

                  USART1_Config PROC
;;;30      //------------------------------------------------------------------------------------------ 
;;;31     void USART1_Config(void)
000020  b510              PUSH     {r4,lr}
;;;32     	{
000022  b086              SUB      sp,sp,#0x18
;;;33        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
000024  2101              MOVS     r1,#1
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;34       GPIO_InitTypeDef initGPIO;
;;;35        // Enable USART1 clock and release reset.
;;;36       RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
00002c  2101              MOVS     r1,#1
00002e  038c              LSLS     r4,r1,#14
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;37       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1,DISABLE);
000036  2100              MOVS     r1,#0
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;38       
;;;39       /* Configure the GPIO ports( USART1 Transmit and Receive Lines) */
;;;40       /* Configure the USART1_Tx as Alternate function Push-Pull */
;;;41       GPIO_StructInit(&initGPIO);
00003e  a804              ADD      r0,sp,#0x10
000040  f7fffffe          BL       GPIO_StructInit
;;;42     	initGPIO.GPIO_Mode  = GPIO_Mode_AF_PP;
000044  2018              MOVS     r0,#0x18
000046  f88d0013          STRB     r0,[sp,#0x13]
;;;43       initGPIO.GPIO_Pin   = GPIO_Pin_9;
00004a  1160              ASRS     r0,r4,#5
00004c  f8ad0010          STRH     r0,[sp,#0x10]
;;;44       initGPIO.GPIO_Speed = GPIO_Speed_50MHz;
000050  2003              MOVS     r0,#3
;;;45       GPIO_Init(GPIOA, &initGPIO);
000052  4c17              LDR      r4,|L1.176|
000054  f88d0012          STRB     r0,[sp,#0x12]         ;44
000058  a904              ADD      r1,sp,#0x10
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       GPIO_Init
;;;46       
;;;47       /* Configure the USART1_Rx as input floating */
;;;48       initGPIO.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000060  2004              MOVS     r0,#4
000062  f88d0013          STRB     r0,[sp,#0x13]
;;;49       initGPIO.GPIO_Pin = GPIO_Pin_10 ;
000066  0200              LSLS     r0,r0,#8
000068  f8ad0010          STRH     r0,[sp,#0x10]
;;;50       GPIO_Init(GPIOA, &initGPIO);
00006c  a904              ADD      r1,sp,#0x10
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       GPIO_Init
;;;51       
;;;52     /* USART1 configuration ------------------------------------------------------*/
;;;53     /* USART1 configured as follow:
;;;54             - BaudRate = 115200 baud  
;;;55             - Word Length = 8 Bits
;;;56             - One Stop Bit
;;;57             - No parity
;;;58             - Hardware flow control disabled (RTS and CTS signals)
;;;59             - Receive and transmit enabled
;;;60     */
;;;61       USART_InitTypeDef initUSART;
;;;62     	
;;;63       initUSART.USART_BaudRate = 115200;
000074  f44f30e1          MOV      r0,#0x1c200
;;;64     	initUSART.USART_WordLength = USART_WordLength_8b;
000078  9000              STR      r0,[sp,#0]
00007a  2000              MOVS     r0,#0
00007c  f8ad0004          STRH     r0,[sp,#4]
;;;65       initUSART.USART_StopBits = USART_StopBits_1;
000080  f8ad0006          STRH     r0,[sp,#6]
;;;66       initUSART.USART_Parity = USART_Parity_No;
000084  f8ad0008          STRH     r0,[sp,#8]
;;;67       initUSART.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000088  f8ad000c          STRH     r0,[sp,#0xc]
;;;68       initUSART.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00008c  200c              MOVS     r0,#0xc
;;;69     
;;;70       /* Configure the USART1 */
;;;71       USART_Init(USART1, &initUSART);
00008e  4c07              LDR      r4,|L1.172|
000090  f8ad000a          STRH     r0,[sp,#0xa]          ;68
000094  4669              MOV      r1,sp
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       USART_Init
;;;72     
;;;73       /* Enable the USART1 */
;;;74       USART_Cmd(USART1, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       USART_Cmd
;;;75     						 
;;;76       
;;;77     						
;;;78     	}	 
0000a4  b006              ADD      sp,sp,#0x18
0000a6  bd10              POP      {r4,pc}
                          ENDP

                  PrintfConfig PROC
;;;21     //------------------------------------------------	
;;;22     	void PrintfConfig(void)
0000a8  e7fe              B        USART1_Config
;;;23        {
;;;24     	  
;;;25     		#if N == 1
;;;26     		 USART1_Config();
;;;27     		#endif 
;;;28     	 }
;;;29     	 
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      0x40013800
                  |L1.176|
                          DCD      0x40010800

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\printf\\printf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_printf_c_fputc____REV16|
#line 129 "C:\\Program Files\\keil\\ARM\\PACK\\ARM\\CMSIS\\3.20.4\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_printf_c_fputc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_printf_c_fputc____REVSH|
#line 144
|__asm___8_printf_c_fputc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
