; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\main.o --asm_dir=.\ --list_dir=.\ --depend=.\main.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\control_task -I..\mode_task -I..\lcdTask -I..\..\CMSIS\CM3\CoreSupport -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I..\radio -I..\..\rtos -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\main.crf ..\main\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  gpio_init PROC
;;;32     	
;;;33     void gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;34     {
;;;35           GPIO_InitTypeDef port;
;;;36     		  //---------leds init---------------------------------
;;;37     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;38     	 
;;;39     			GPIO_StructInit(&port);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GPIO_StructInit
;;;40     			port.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;41     			port.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
000016  20fe              MOVS     r0,#0xfe
000018  f8ad0000          STRH     r0,[sp,#0]
;;;42     			port.GPIO_Speed = GPIO_Speed_10MHz;
00001c  2001              MOVS     r0,#1
00001e  f88d0002          STRB     r0,[sp,#2]
;;;43     			GPIO_Init(GPIOA, &port);
000022  4669              MOV      r1,sp
000024  4816              LDR      r0,|L1.128|
000026  f7fffffe          BL       GPIO_Init
;;;44     }
00002a  bd08              POP      {r3,pc}
;;;45     	
                          ENDP

                  main PROC
;;;4      
;;;5      int main()
00002c  b51f              PUSH     {r0-r4,lr}
;;;6      	{
;;;7      		//-------------------------------------------------start initialisation---------------------------------------
;;;8      		
;;;9      		//PrintfConfig();
;;;10     		gpio_init(); 
00002e  f7fffffe          BL       gpio_init
;;;11     //		printf("\r\n ----------------------------------------------------------------------------------");	
;;;12     //		printf("\r\n|                                !stm32f100vldiscovery!                             |");
;;;13     //		printf("\r\n|                                  !freeRTOS v8.1.2!                                |");
;;;14     //		printf("\r\n----------------------------------------------------------------------------------");	
;;;15     		
;;;16     		
;;;17     		//-------------------------------------------------tasks start------------------------------------------------
;;;18     		
;;;19     		xTaskCreate(vLedTask,(const char*)"LedTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
000032  2400              MOVS     r4,#0
000034  2501              MOVS     r5,#1
000036  e9cd5400          STRD     r5,r4,[sp,#0]
00003a  9402              STR      r4,[sp,#8]
00003c  4623              MOV      r3,r4
00003e  2246              MOVS     r2,#0x46
000040  a110              ADR      r1,|L1.132|
000042  4812              LDR      r0,|L1.140|
000044  9403              STR      r4,[sp,#0xc]
000046  f7fffffe          BL       xTaskGenericCreate
00004a  e9cd5400          STRD     r5,r4,[sp,#0]
;;;20     		xTaskCreate(vGetLoadCPU,(const char*)"getLoadCPU",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
00004e  9402              STR      r4,[sp,#8]
000050  2300              MOVS     r3,#0
000052  2246              MOVS     r2,#0x46
000054  a10e              ADR      r1,|L1.144|
000056  4811              LDR      r0,|L1.156|
000058  9403              STR      r4,[sp,#0xc]
00005a  f7fffffe          BL       xTaskGenericCreate
00005e  e9cd5400          STRD     r5,r4,[sp,#0]
;;;21     		
;;;22     		
;;;23     	 
;;;24     		xTaskCreate(vLcdTask,(const char*)"lcdTask",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
000062  9402              STR      r4,[sp,#8]
000064  2300              MOVS     r3,#0
000066  2246              MOVS     r2,#0x46
000068  a10d              ADR      r1,|L1.160|
00006a  480f              LDR      r0,|L1.168|
00006c  9403              STR      r4,[sp,#0xc]
00006e  f7fffffe          BL       xTaskGenericCreate
;;;25     	
;;;26     		
;;;27     		vTaskStartScheduler();  //
000072  f7fffffe          BL       vTaskStartScheduler
                  |L1.118|
;;;28     		
;;;29     		for(;;){__NOP();}
000076  bf00              NOP      
000078  e7fd              B        |L1.118|
;;;30     	}
;;;31     	
                          ENDP

                  assert_failed PROC
                  |L1.122|
;;;47     
;;;48     void assert_failed(uint8_t* file, uint32_t line)
00007a  bf00              NOP      
;;;49     { 
;;;50       
;;;51       //printf ("\r\n  file %s /n line= %d",file,line);
;;;52       
;;;53       while (1)
;;;54       {
;;;55      __NOP();
00007c  e7fd              B        |L1.122|
;;;56     	}
;;;57     }
;;;58     #endif
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40010800
                  |L1.132|
000084  4c656454          DCB      "LedTask",0
000088  61736b00
                  |L1.140|
                          DCD      vLedTask
                  |L1.144|
000090  6765744c          DCB      "getLoadCPU",0
000094  6f616443
000098  505500  
00009b  00                DCB      0
                  |L1.156|
                          DCD      vGetLoadCPU
                  |L1.160|
0000a0  6c636454          DCB      "lcdTask",0
0000a4  61736b00
                  |L1.168|
                          DCD      vLcdTask

                  __ARM_use_no_argv EQU 0
