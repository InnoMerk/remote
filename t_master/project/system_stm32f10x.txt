; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\system_stm32f10x.o --asm_dir=.\ --list_dir=.\ --depend=.\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\control_task -I..\mode_task -I..\lcdTask -I..\..\CMSIS\CM3\CoreSupport -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I..\radio -I..\..\rtos -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\system_stm32f10x.crf ..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x\system_stm32f10x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;211      */
;;;212    void SystemInit (void)
000000  4848              LDR      r0,|L1.292|
;;;213    {
000002  b510              PUSH     {r4,lr}
;;;214      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;217    
;;;218      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;219    #ifndef STM32F10X_CL
;;;220      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  6841              LDR      r1,[r0,#4]
00000e  4a46              LDR      r2,|L1.296|
000010  4011              ANDS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;221    #else
;;;222      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;223    #endif /* STM32F10X_CL */   
;;;224      
;;;225      /* Reset HSEON, CSSON and PLLON bits */
;;;226      RCC->CR &= (uint32_t)0xFEF6FFFF;
000014  6801              LDR      r1,[r0,#0]
000016  4a45              LDR      r2,|L1.300|
000018  4011              ANDS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;227    
;;;228      /* Reset HSEBYP bit */
;;;229      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001c  6801              LDR      r1,[r0,#0]
00001e  f4212180          BIC      r1,r1,#0x40000
000022  6001              STR      r1,[r0,#0]
;;;230    
;;;231      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;232      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000024  6841              LDR      r1,[r0,#4]
000026  f42101fe          BIC      r1,r1,#0x7f0000
00002a  6041              STR      r1,[r0,#4]
;;;233    
;;;234    #ifdef STM32F10X_CL
;;;235      /* Reset PLL2ON and PLL3ON bits */
;;;236      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;237    
;;;238      /* Disable all interrupts and clear pending bits  */
;;;239      RCC->CIR = 0x00FF0000;
;;;240    
;;;241      /* Reset CFGR2 register */
;;;242      RCC->CFGR2 = 0x00000000;
;;;243    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;244      /* Disable all interrupts and clear pending bits  */
;;;245      RCC->CIR = 0x009F0000;
00002c  f44f011f          MOV      r1,#0x9f0000
000030  6081              STR      r1,[r0,#8]
;;;246    
;;;247      /* Reset CFGR2 register */
;;;248      RCC->CFGR2 = 0x00000000;      
000032  2100              MOVS     r1,#0
000034  62c1              STR      r1,[r0,#0x2c]
000036  f7fffffe          BL       SetSysClockTo24
;;;249    #else
;;;250      /* Disable all interrupts and clear pending bits  */
;;;251      RCC->CIR = 0x009F0000;
;;;252    #endif /* STM32F10X_CL */
;;;253        
;;;254    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;255      #ifdef DATA_IN_ExtSRAM
;;;256        SystemInit_ExtMemCtl(); 
;;;257      #endif /* DATA_IN_ExtSRAM */
;;;258    #endif 
;;;259    
;;;260      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;261      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;262      SetSysClock();
;;;263    
;;;264    #ifdef VECT_TAB_SRAM
;;;265      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;266    #else
;;;267      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00003a  493d              LDR      r1,|L1.304|
00003c  f04f6000          MOV      r0,#0x8000000
000040  6008              STR      r0,[r1,#0]
;;;268    #endif 
;;;269    }
000042  bd10              POP      {r4,pc}
;;;270    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;305      */
;;;306    void SystemCoreClockUpdate (void)
000044  b530              PUSH     {r4,r5,lr}
;;;307    {
;;;308      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;309    
;;;310    #ifdef  STM32F10X_CL
;;;311      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;312    #endif /* STM32F10X_CL */
;;;313    
;;;314    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;315      uint32_t prediv1factor = 0;
;;;316    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;317        
;;;318      /* Get SYSCLK source -------------------------------------------------------*/
;;;319      tmp = RCC->CFGR & RCC_CFGR_SWS;
000046  4937              LDR      r1,|L1.292|
000048  6848              LDR      r0,[r1,#4]
;;;320      
;;;321      switch (tmp)
;;;322      {
;;;323        case 0x00:  /* HSI used as system clock */
;;;324          SystemCoreClock = HSI_VALUE;
00004a  4a3a              LDR      r2,|L1.308|
00004c  f010030c          ANDS     r3,r0,#0xc            ;319
000050  4839              LDR      r0,|L1.312|
000052  d003              BEQ      |L1.92|
000054  2b04              CMP      r3,#4                 ;321
000056  d001              BEQ      |L1.92|
000058  2b08              CMP      r3,#8                 ;321
00005a  d001              BEQ      |L1.96|
                  |L1.92|
;;;325          break;
00005c  6002              STR      r2,[r0,#0]  ; SystemCoreClock
00005e  e015              B        |L1.140|
                  |L1.96|
;;;326        case 0x04:  /* HSE used as system clock */
;;;327          SystemCoreClock = HSE_VALUE;
;;;328          break;
;;;329        case 0x08:  /* PLL used as system clock */
;;;330    
;;;331          /* Get PLL clock source and multiplication factor ----------------------*/
;;;332          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000060  684b              LDR      r3,[r1,#4]
;;;333          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000062  684c              LDR      r4,[r1,#4]
000064  f4031370          AND      r3,r3,#0x3c0000       ;332
;;;334          
;;;335    #ifndef STM32F10X_CL      
;;;336          pllmull = ( pllmull >> 18) + 2;
000068  f04f0502          MOV      r5,#2
00006c  f4143f80          TST      r4,#0x10000           ;333
000070  eb054393          ADD      r3,r5,r3,LSR #18
;;;337          
;;;338          if (pllsource == 0x00)
000074  d007              BEQ      |L1.134|
;;;339          {
;;;340            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;341            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;342          }
;;;343          else
;;;344          {
;;;345     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;346           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
000076  6acc              LDR      r4,[r1,#0x2c]
000078  f004040f          AND      r4,r4,#0xf
00007c  1c64              ADDS     r4,r4,#1
;;;347           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;348           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
00007e  fbb2f2f4          UDIV     r2,r2,r4
000082  435a              MULS     r2,r3,r2
000084  e7ea              B        |L1.92|
                  |L1.134|
000086  4a2d              LDR      r2,|L1.316|
000088  4353              MULS     r3,r2,r3              ;341
00008a  6003              STR      r3,[r0,#0]            ;341  ; SystemCoreClock
                  |L1.140|
;;;349     #else
;;;350            /* HSE selected as PLL clock entry */
;;;351            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
;;;352            {/* HSE oscillator clock divided by 2 */
;;;353              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
;;;354            }
;;;355            else
;;;356            {
;;;357              SystemCoreClock = HSE_VALUE * pllmull;
;;;358            }
;;;359     #endif
;;;360          }
;;;361    #else
;;;362          pllmull = pllmull >> 18;
;;;363          
;;;364          if (pllmull != 0x0D)
;;;365          {
;;;366             pllmull += 2;
;;;367          }
;;;368          else
;;;369          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;370            pllmull = 13 / 2; 
;;;371          }
;;;372                
;;;373          if (pllsource == 0x00)
;;;374          {
;;;375            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;376            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;377          }
;;;378          else
;;;379          {/* PREDIV1 selected as PLL clock entry */
;;;380            
;;;381            /* Get PREDIV1 clock source and division factor */
;;;382            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;383            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;384            
;;;385            if (prediv1source == 0)
;;;386            { 
;;;387              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;388              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;389            }
;;;390            else
;;;391            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;392              
;;;393              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;394              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;395              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;396              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;397            }
;;;398          }
;;;399    #endif /* STM32F10X_CL */ 
;;;400          break;
;;;401    
;;;402        default:
;;;403          SystemCoreClock = HSI_VALUE;
;;;404          break;
;;;405      }
;;;406      
;;;407      /* Compute HCLK clock frequency ----------------*/
;;;408      /* Get HCLK prescaler */
;;;409      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00008c  6849              LDR      r1,[r1,#4]
00008e  4a2a              LDR      r2,|L1.312|
000090  f3c11103          UBFX     r1,r1,#4,#4
000094  1d12              ADDS     r2,r2,#4
000096  5c51              LDRB     r1,[r2,r1]
;;;410      /* HCLK clock frequency */
;;;411      SystemCoreClock >>= tmp;  
000098  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
00009a  40ca              LSRS     r2,r2,r1
00009c  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;412    }
00009e  bd30              POP      {r4,r5,pc}
;;;413    
                          ENDP

                  SetSysClockTo24 PROC
;;;578      */
;;;579    static void SetSysClockTo24(void)
0000a0  b50c              PUSH     {r2,r3,lr}
;;;580    {
;;;581      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
0000a2  2100              MOVS     r1,#0
;;;582      
;;;583      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;584      /* Enable HSE */    
;;;585      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
0000a4  481f              LDR      r0,|L1.292|
0000a6  9101              STR      r1,[sp,#4]            ;581
0000a8  9100              STR      r1,[sp,#0]
0000aa  6802              LDR      r2,[r0,#0]
0000ac  f4423280          ORR      r2,r2,#0x10000
0000b0  6002              STR      r2,[r0,#0]
;;;586     
;;;587      /* Wait till HSE is ready and if Time out is reached exit */
;;;588      do
;;;589      {
;;;590        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;591        StartUpCounter++;  
;;;592      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
0000b2  f44f63a0          MOV      r3,#0x500
                  |L1.182|
0000b6  6802              LDR      r2,[r0,#0]            ;590
0000b8  f4023200          AND      r2,r2,#0x20000        ;590
0000bc  9200              STR      r2,[sp,#0]            ;591
0000be  9a01              LDR      r2,[sp,#4]            ;591
0000c0  1c52              ADDS     r2,r2,#1              ;591
0000c2  9201              STR      r2,[sp,#4]
0000c4  9a00              LDR      r2,[sp,#0]
0000c6  b912              CBNZ     r2,|L1.206|
0000c8  9a01              LDR      r2,[sp,#4]
0000ca  429a              CMP      r2,r3
0000cc  d1f3              BNE      |L1.182|
                  |L1.206|
;;;593    
;;;594      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
0000ce  6802              LDR      r2,[r0,#0]
0000d0  0392              LSLS     r2,r2,#14
0000d2  d524              BPL      |L1.286|
;;;595      {
;;;596        HSEStatus = (uint32_t)0x01;
0000d4  2101              MOVS     r1,#1
;;;597      }
;;;598      else
;;;599      {
;;;600        HSEStatus = (uint32_t)0x00;
;;;601      }  
;;;602    
;;;603      if (HSEStatus == (uint32_t)0x01)
;;;604      {
;;;605    #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
;;;606        /* Enable Prefetch Buffer */
;;;607        FLASH->ACR |= FLASH_ACR_PRFTBE;
;;;608    
;;;609        /* Flash 0 wait state */
;;;610        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
;;;611        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
;;;612    #endif
;;;613     
;;;614        /* HCLK = SYSCLK */
;;;615        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
0000d6  9100              STR      r1,[sp,#0]
0000d8  6841              LDR      r1,[r0,#4]
0000da  6041              STR      r1,[r0,#4]
;;;616          
;;;617        /* PCLK2 = HCLK */
;;;618        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
0000dc  6841              LDR      r1,[r0,#4]
0000de  6041              STR      r1,[r0,#4]
;;;619        
;;;620        /* PCLK1 = HCLK */
;;;621        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
0000e0  6841              LDR      r1,[r0,#4]
0000e2  6041              STR      r1,[r0,#4]
;;;622        
;;;623    #ifdef STM32F10X_CL
;;;624        /* Configure PLLs ------------------------------------------------------*/
;;;625        /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
;;;626        RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;627        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;628                                RCC_CFGR_PLLMULL6); 
;;;629    
;;;630        /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;631        /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
;;;632        RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;633                                  RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;634        RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;635                                 RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
;;;636      
;;;637        /* Enable PLL2 */
;;;638        RCC->CR |= RCC_CR_PLL2ON;
;;;639        /* Wait till PLL2 is ready */
;;;640        while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;641        {
;;;642        }   
;;;643    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
;;;644        /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
;;;645        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
0000e4  6841              LDR      r1,[r0,#4]
0000e6  f421117c          BIC      r1,r1,#0x3f0000
0000ea  6041              STR      r1,[r0,#4]
;;;646        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
0000ec  6841              LDR      r1,[r0,#4]
0000ee  f4411198          ORR      r1,r1,#0x130000
0000f2  6041              STR      r1,[r0,#4]
;;;647    #else    
;;;648        /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
;;;649        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
;;;650        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
;;;651    #endif /* STM32F10X_CL */
;;;652    
;;;653        /* Enable PLL */
;;;654        RCC->CR |= RCC_CR_PLLON;
0000f4  6801              LDR      r1,[r0,#0]
0000f6  f0417180          ORR      r1,r1,#0x1000000
0000fa  6001              STR      r1,[r0,#0]
                  |L1.252|
;;;655    
;;;656        /* Wait till PLL is ready */
;;;657        while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000fc  6801              LDR      r1,[r0,#0]
0000fe  0189              LSLS     r1,r1,#6
000100  d5fc              BPL      |L1.252|
;;;658        {
;;;659        }
;;;660    
;;;661        /* Select PLL as system clock source */
;;;662        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000102  6841              LDR      r1,[r0,#4]
000104  f0210103          BIC      r1,r1,#3
000108  6041              STR      r1,[r0,#4]
;;;663        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
00010a  6841              LDR      r1,[r0,#4]
00010c  f0410102          ORR      r1,r1,#2
000110  6041              STR      r1,[r0,#4]
                  |L1.274|
;;;664    
;;;665        /* Wait till PLL is used as system clock source */
;;;666        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
000112  6841              LDR      r1,[r0,#4]
000114  f3c10181          UBFX     r1,r1,#2,#2
000118  2902              CMP      r1,#2
00011a  d1fa              BNE      |L1.274|
;;;667        {
;;;668        }
;;;669      }
;;;670      else
;;;671      { /* If HSE fails to start-up, the application will have wrong clock 
;;;672             configuration. User can add here some code to deal with this error */
;;;673      } 
;;;674    }
00011c  bd0c              POP      {r2,r3,pc}
                  |L1.286|
00011e  9100              STR      r1,[sp,#0]            ;600
000120  bd0c              POP      {r2,r3,pc}
;;;675    #elif defined SYSCLK_FREQ_36MHz
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
                          DCD      0x40021000
                  |L1.296|
                          DCD      0xf8ff0000
                  |L1.300|
                          DCD      0xfef6ffff
                  |L1.304|
                          DCD      0xe000ed08
                  |L1.308|
                          DCD      0x007a1200
                  |L1.312|
                          DCD      ||.data||
                  |L1.316|
                          DCD      0x003d0900

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x016e3600
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
