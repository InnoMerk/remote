; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\misc.o --asm_dir=.\ --list_dir=.\ --depend=.\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\project -I..\hooks -I..\lcd -I..\led -I..\load_cpu -I..\main -I..\printf -I..\rtos -I..\control_task -I..\mode_task -I..\lcdTask -I..\..\CMSIS\CM3\CoreSupport -I..\..\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\STM32F10x_StdPeriph_Driver\inc -I..\..\STM32F10x_StdPeriph_Driver\src -I..\radio -I..\..\rtos -I"C:\Program Files\keil\ARM\RV31\INC" -I"C:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"C:\Program Files\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include" -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\misc.crf ..\..\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  b510              PUSH     {r4,lr}
;;;97     {
000002  4604              MOV      r4,r0
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
000004  f5b06fe0          CMP      r0,#0x700
000008  d00f              BEQ      |L1.42|
00000a  f5b46fc0          CMP      r4,#0x600
00000e  d00c              BEQ      |L1.42|
000010  f5b46fa0          CMP      r4,#0x500
000014  d009              BEQ      |L1.42|
000016  f5b46f80          CMP      r4,#0x400
00001a  d006              BEQ      |L1.42|
00001c  f5b47f40          CMP      r4,#0x300
000020  d003              BEQ      |L1.42|
000022  2163              MOVS     r1,#0x63
000024  a04d              ADR      r0,|L1.348|
000026  f7fffffe          BL       assert_failed
                  |L1.42|
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
00002a  4857              LDR      r0,|L1.392|
00002c  4304              ORRS     r4,r4,r0
00002e  4857              LDR      r0,|L1.396|
000030  6004              STR      r4,[r0,#0]
;;;103    }
000032  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000034  b570              PUSH     {r4-r6,lr}
;;;113    {
000036  4604              MOV      r4,r0
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
000038  78c0              LDRB     r0,[r0,#3]
00003a  250f              MOVS     r5,#0xf               ;114
00003c  b128              CBZ      r0,|L1.74|
00003e  2801              CMP      r0,#1
000040  d003              BEQ      |L1.74|
000042  2175              MOVS     r1,#0x75
000044  a045              ADR      r0,|L1.348|
000046  f7fffffe          BL       assert_failed
                  |L1.74|
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
00004a  7860              LDRB     r0,[r4,#1]
00004c  2810              CMP      r0,#0x10
00004e  d303              BCC      |L1.88|
000050  2176              MOVS     r1,#0x76
000052  a042              ADR      r0,|L1.348|
000054  f7fffffe          BL       assert_failed
                  |L1.88|
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
000058  78a0              LDRB     r0,[r4,#2]
00005a  2810              CMP      r0,#0x10
00005c  d303              BCC      |L1.102|
00005e  2177              MOVS     r1,#0x77
000060  a03e              ADR      r0,|L1.348|
000062  f7fffffe          BL       assert_failed
                  |L1.102|
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000066  78e1              LDRB     r1,[r4,#3]
000068  2001              MOVS     r0,#1                 ;117
00006a  b1f9              CBZ      r1,|L1.172|
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
00006c  4947              LDR      r1,|L1.396|
00006e  6809              LDR      r1,[r1,#0]
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
000070  7862              LDRB     r2,[r4,#1]
000072  f40161e0          AND      r1,r1,#0x700          ;124
000076  f5c161e0          RSB      r1,r1,#0x700          ;124
00007a  0a09              LSRS     r1,r1,#8              ;124
00007c  f1c10304          RSB      r3,r1,#4              ;125
000080  40cd              LSRS     r5,r5,r1              ;126
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
000082  78a1              LDRB     r1,[r4,#2]
000084  409a              LSLS     r2,r2,r3              ;128
000086  4029              ANDS     r1,r1,r5
000088  4311              ORRS     r1,r1,r2
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
00008a  7822              LDRB     r2,[r4,#0]
00008c  0109              LSLS     r1,r1,#4              ;130
00008e  f10222e0          ADD      r2,r2,#0xe000e000
000092  f8821400          STRB     r1,[r2,#0x400]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000096  7821              LDRB     r1,[r4,#0]
000098  f001021f          AND      r2,r1,#0x1f
00009c  4090              LSLS     r0,r0,r2
00009e  0949              LSRS     r1,r1,#5
0000a0  0089              LSLS     r1,r1,#2
0000a2  f10121e0          ADD      r1,r1,#0xe000e000
0000a6  f8c10100          STR      r0,[r1,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
0000aa  bd70              POP      {r4-r6,pc}
                  |L1.172|
0000ac  7821              LDRB     r1,[r4,#0]            ;141
0000ae  f001021f          AND      r2,r1,#0x1f           ;141
0000b2  4090              LSLS     r0,r0,r2              ;141
0000b4  0949              LSRS     r1,r1,#5              ;141
0000b6  0089              LSLS     r1,r1,#2              ;141
0000b8  f10121e0          ADD      r1,r1,#0xe000e000     ;141
0000bc  f8c10180          STR      r0,[r1,#0x180]        ;141
0000c0  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
0000c2  b570              PUSH     {r4-r6,lr}
;;;157    { 
0000c4  460d              MOV      r5,r1
0000c6  4604              MOV      r4,r0
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
0000c8  f1b05f00          CMP      r0,#0x20000000
0000cc  d006              BEQ      |L1.220|
0000ce  f1b46f00          CMP      r4,#0x8000000
0000d2  d003              BEQ      |L1.220|
0000d4  219f              MOVS     r1,#0x9f
0000d6  a021              ADR      r0,|L1.348|
0000d8  f7fffffe          BL       assert_failed
                  |L1.220|
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
0000dc  482c              LDR      r0,|L1.400|
0000de  4285              CMP      r5,r0
0000e0  d303              BCC      |L1.234|
0000e2  21a0              MOVS     r1,#0xa0
0000e4  a01d              ADR      r0,|L1.348|
0000e6  f7fffffe          BL       assert_failed
                  |L1.234|
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
0000ea  482a              LDR      r0,|L1.404|
0000ec  4005              ANDS     r5,r5,r0
0000ee  4827              LDR      r0,|L1.396|
0000f0  4325              ORRS     r5,r5,r4
0000f2  1f00              SUBS     r0,r0,#4
0000f4  6005              STR      r5,[r0,#0]
;;;163    }
0000f6  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
0000f8  b570              PUSH     {r4-r6,lr}
;;;176    {
0000fa  460e              MOV      r6,r1
0000fc  4604              MOV      r4,r0
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
0000fe  2810              CMP      r0,#0x10
000100  d007              BEQ      |L1.274|
000102  2c04              CMP      r4,#4
000104  d005              BEQ      |L1.274|
000106  2c02              CMP      r4,#2
000108  d003              BEQ      |L1.274|
00010a  21b2              MOVS     r1,#0xb2
00010c  a013              ADR      r0,|L1.348|
00010e  f7fffffe          BL       assert_failed
                  |L1.274|
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
000112  4d1e              LDR      r5,|L1.396|
000114  1d2d              ADDS     r5,r5,#4
000116  b146              CBZ      r6,|L1.298|
000118  2e01              CMP      r6,#1                 ;179
00011a  d003              BEQ      |L1.292|
00011c  21b3              MOVS     r1,#0xb3              ;179
00011e  a00f              ADR      r0,|L1.348|
000120  f7fffffe          BL       assert_failed
                  |L1.292|
000124  6828              LDR      r0,[r5,#0]
000126  4320              ORRS     r0,r0,r4
000128  e001              B        |L1.302|
                  |L1.298|
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00012a  6828              LDR      r0,[r5,#0]
00012c  43a0              BICS     r0,r0,r4
                  |L1.302|
00012e  6028              STR      r0,[r5,#0]            ;183
;;;188      }
;;;189    }
000130  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000132  b510              PUSH     {r4,lr}
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
000134  f04f24e0          MOV      r4,#0xe000e000
000138  2804              CMP      r0,#4                 ;202
00013a  d009              BEQ      |L1.336|
00013c  1d40              ADDS     r0,r0,#5              ;200
00013e  d003              BEQ      |L1.328|
000140  21ca              MOVS     r1,#0xca              ;202
000142  a006              ADR      r0,|L1.348|
000144  f7fffffe          BL       assert_failed
                  |L1.328|
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000148  6920              LDR      r0,[r4,#0x10]
00014a  f0200004          BIC      r0,r0,#4
00014e  e002              B        |L1.342|
                  |L1.336|
000150  6920              LDR      r0,[r4,#0x10]         ;205
000152  f0400004          ORR      r0,r0,#4              ;205
                  |L1.342|
000156  6120              STR      r0,[r4,#0x10]
;;;210      }
;;;211    }
000158  bd10              POP      {r4,pc}
;;;212    
                          ENDP

00015a  0000              DCW      0x0000
                  |L1.348|
00015c  2e2e5c2e          DCB      "..\\..\\STM32F10x_StdPeriph_Driver\\src\\misc.c",0
000160  2e5c5354
000164  4d333246
000168  3130785f
00016c  53746450
000170  65726970
000174  685f4472
000178  69766572
00017c  5c737263
000180  5c6d6973
000184  632e6300
                  |L1.392|
                          DCD      0x05fa0000
                  |L1.396|
                          DCD      0xe000ed0c
                  |L1.400|
                          DCD      0x000fffff
                  |L1.404|
                          DCD      0x1fffff80
